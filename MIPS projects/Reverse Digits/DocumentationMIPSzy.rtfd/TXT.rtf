{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleSymbols;\f2\fnil\fcharset0 LucidaGrande;
\f3\fmodern\fcharset0 Courier;\f4\fmodern\fcharset0 Courier-Bold;\f5\fnil\fcharset0 HelveticaNeue-Light;
}
{\colortbl;\red255\green255\blue255;\red42\green55\blue62;\red175\green175\blue175;\red234\green234\blue234;
\red67\green91\blue103;\red15\green115\blue198;\red38\green108\blue38;\red240\green103\blue8;\red242\green242\blue242;
\red217\green217\blue217;\red165\green207\blue254;\red161\green176\blue184;\red109\green111\blue36;\red16\green125\blue2;
\red107\green0\blue109;\red107\green0\blue1;\red86\green86\blue86;\red70\green108\blue149;\red38\green38\blue38;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid601\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1001\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1702\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2001\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid23}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}}
\margl1440\margr1440\vieww23560\viewh23980\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs64 \cf2 \expnd0\expndtw0\kerning0
2.7 Floating-point arithmetic\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Adding decimal floating-point numbers\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Adding two decimal floating-point numbers in normalized scientific notation can be done in three steps:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Make the exponents the same\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Add the significands, applying the same exponent\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
If necessary, adjust the result to normalized scientific notation.\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 2.7.1: Adding decimal floating-point numbers.\cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-10 at 6.24.47 PM.png \width14700 \height7860
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 6.26.15 PM.png \width14780 \height8040
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 6.26.37 PM.png \width14640 \height7820
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 7.59.53 PM.png \width19840 \height16220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 8.00.15 PM.png \width19780 \height15760
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Adding binary floating-point numbers\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 To add together binary floating-point numbers represented using normalized scientific notation, the exponents must first be the same, just like in decimal notation. Then one can add together the significands. If the result is not in normalized scientific notation, the result's exponent and binary point location are adjusted.\
If the exponents differ, the process is again similar to the decimal notation process. One value's exponent is adjusted to match the other exponent by moving the location of the value's binary point before the significands are added.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 2.7.1: Adding binary floating-point numbers.\
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 8.00.41 PM.png \width18620 \height6740
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
2.7.3: Binary floating-point addition.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 9.01.41 PM.png \width19580 \height24560
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 9.02.06 PM.png \width19460 \height5420
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Multiplying binary floating-point numbers\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Multiplying floating-point numbers can be done in three steps:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Multiply the significands.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Add the exponents.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Adjust to normalized scientific notation.\
\pard\pardeftab720\partightenfactor0
\cf2 \
Note that the exponents need not be the same. Ex: For decimal, given (3.1\'d710
\fs24 5
\fs32 ) \'d7 (4.0\'d710
\fs24 2
\fs32 ), then\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
3.1 \'d7 4.0 is 12.4\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
5 + 2 is 7\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Adjusting 12.4\'d710
\fs24 7
\fs32  yields 1.24\'d710
\fs24 8
\fs32 \
\pard\pardeftab720\partightenfactor0
\cf2 The steps for binary are the same.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-10 at 9.03.00 PM.png \width14580 \height8520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 9.03.34 PM.png \width14560 \height8420
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 9.03.54 PM.png \width14620 \height8560
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
2.7.5: Binary floating-point multiplication.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 9.27.27 PM.png \width19660 \height23760
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
2.7.1: Floating-point arithmetic.\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-10 at 9.38.01 PM.png \width14840 \height14120
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 9.35.50 PM.png \width14780 \height13620
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 9.31.14 PM.png \width14460 \height11400
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-10 at 9.29.29 PM.png \width15500 \height12560
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
DIGITAL LOGIC\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 3.1 Why study digital design\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Studying digital design gives professionals, like computer scientists, or electrical and computer engineers, a deeper understanding of how computers work "under the hood." Even if going on to do others tasks, like writing software, assembling systems, etc., such understanding can lead to more professional accomplishment of those tasks\'97akin to drivers knowing how a car engine works being better professional drivers, or to a skin expert knowing how all the human body works being better dermatologists. And, some computing professionals 
\i will
\i0  go on to directly use digital design to build computers.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 3.1.1: Digital design is needed to understand how computing systems work.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 {{\NeXTGraphic embedded_image_1_8e23865e-1df1-157f-323b-6a85a86114c9_yC9gfKI5fQFa5fkCSagA.png \width25600 \height7060 \noorient
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 Feedback?\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Studying digital design is also important for professionals who may build embedded systems, like computer scientists, electrical and computer engineers, mechanical engineers, biomedical engineers, physicists, and more. An 
\i\b embedded system
\i0\b0  is a computing system embedded within another device like an automobile, an electronic book reader or music player, a robot, a medical device, a home security system, and much more. Hundreds of times more embedded systems exist than traditional computers. As digital circuit chips continue to shrink, become more powerful, and reduce in cost, previously-unimaginable exciting embedded system inventions continue to be unveiled, like eyeglasses that a user can talk to and get instant information displayed in the lenses, like self-driving cars, or like ingestible computerized pills that deliver time-released medicines or that measure internal body data\'97all of which exist today. To meet tight constraints on size, performance, power, or cost, embedded systems often use various combinations of microprocessors and custom digital circuits.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 3.1.2: Embedded systems: Smart pill, automobiles, and more!\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 {{\NeXTGraphic embedded_image_1_fb28fd1d-8bc7-ebe9-0d93-2391ca6c3971_yC9gfKI5fQFa5fkCSagA.png \width15100 \height6180 \noorient
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 3.1.1: Why digital design.\cb1 \
Which of the following are likely to be true, based on the above discussion?\
1)\
The VP of Engineering at a billion-dollar hard-drive maker complained that computer science graduates who "don't understand resources" end up writing grossly inefficient software.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 True\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 A VP of a major hard drive manufacturer made that statement to one of this material's authors. Without understanding how a microprocessor executes code, programmers may write code that results in wasteful execution. In many software environments, like programming a hard drive (an embedded system), such waste is unacceptable.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
Knowing what computer parts do, like memory or clock, can help in purchasing computers.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 True\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Features like memory, clock, cache, hard drive, and more, or typically listed but commonly not understood by computer purchasers. Knowledge can be especially helpful for system builders and maintainers.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
A computer software update involved updating the flash memory of a hardware component. The update failed. A phone technician said the component required replacement, but based on knowledge of how flash memory worked, the user suggested manually downloading the software, which worked.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 True\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 A true experience of one of the authors. Knowing how computers work "under the hood" can help in many ways.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
The inventor of the most widely-used programming language (as of 2014) says that the trend of hiding under-the-hood details from computing graduates is "a disaster waiting to happen."\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 True\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Said directly to one of this material's authors in a personal conversation. In computing, abstractions are important, but a good balance between abstraction and bottom-up knowledge may be prudent.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \
5)\
Each function of an embedded system is inherently either a microprocessor program or a custom digital circuit, but can't be both.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 False\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Each function, like compressing a data file or sending bits wirelessly, can typically be implemented either as a program or a circuit (or even a combination thereof). Each implementation exhibits different power, performance, size, cost, etc. Embedded system designers try various implementations for different parts of a system, to find a good overall tradeoff.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\
\pard\pardeftab720\partightenfactor0

\b0\fs64 \cf2 3.2 Electronics and digital systems\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Voltage and current\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Electrical systems are ubiquitous, in appliances, computers, cars, etc. An 
\i\b electrical system
\i0\b0  involves movement of charged electrons through wires.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\i\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Voltage
\i0\b0  is the potential for charge to move. Voltage is measured in 
\i\b Volts
\i0\b0 .\
\ls4\ilvl0
\i\b \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Current
\i0\b0  is the amount of charge flow. Current is measured in 
\i\b Amps
\i0\b0 .\
\ls4\ilvl0
\i\b \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Resistance
\i0\b0  is a wire's opposition to flow. Resistance is measured in 
\i\b Ohms
\i0\b0 .\
\pard\pardeftab720\partightenfactor0
\cf2 An example electrical system is a lamp that passes current through a glowing resistor in a light bulb. The more current, the brighter the glow.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 9.17.01 PM.png \width14720 \height9340
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
Above, the zigzag line represents a resistor.\
Voltage is like the water pressure in a faucet for a garden hose. Current is like the amount of water actually flowing through the hose. Resistance is like a thin hose more-strongly resisting flow than a thick hose.\
Current flows from a higher-voltage point to a lower-voltage point on a wire. 0 V is commonly called 
\i\b ground
\i0\b0  and drawn as three line segments, as above.\
Voltage (V), current (I), and resistance (R) are related as V = IR, called 
\i\b Ohm's Law
\i0\b0 .\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 3.2.2: Terminology: Electrical systems.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 9.25.32 PM.png \width19180 \height11800
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 3.2.3: Voltage, current, and resistance.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 9.44.46 PM.png \width19280 \height15640
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\
\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 The voltage on a wire with no resistance is the same everywhere on the wire. But voltage drops across a resistor as V = IR.\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 9.52.59 PM.png \width19600 \height19600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Note: Nearly every wire has some tiny resistance (with the exception of superconductors), but that resistance is commonly ignored.\
Note: Convention is to show current flowing from higher voltage to lower voltage, even though actual flow is in the other direction, due to electrons having negative charge. But the net effect is the same.\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Switches\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b switch
\i0\b0  is an electronic device that acts like a wire (a.k.a. "conducts") between two terminals if the switch is configured to on. A light-switch is an example.
\b\fs26 \cf6 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.10.48 PM.png \width15540 \height10140
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 An 
\i\b electronically-controlled switch
\i0\b0  has another input terminal whose voltage can turn the switch on. The terminal that controls an electronically-controlled switch is known as the 
\i\b control input
\i0\b0 .
\b\fs26 \cf6 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.11.24 PM.png \width14420 \height10240
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.11.41 PM.png \width9960 \height7020
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Switches in the early 1900s were large, each being several inches long. A 
\i\b transistor
\i0\b0  is a smaller simpler switch with no mechanical parts, invented in 1947.
\b\fs26 \cf6 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf6 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.12.19 PM.png \width19560 \height10440
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\
\
\pard\pardeftab720\partightenfactor0

\fs37\fsmilli18720 \cf2 CMOS transistors\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b CMOS transistor
\i0\b0  is a popular transistor type. Two types of CMOS transistors are pMOS and nMOS. An 
\i\b nMOS
\i0\b0  transistor conducts when its control input is 1. A 
\i\b pMOS
\i0\b0  transistor conducts when its control input is 0.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.14.39 PM.png \width14420 \height9300
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb4 3.2.9: pMOS and nMOS transistors.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.15.59 PM.png \width19460 \height9900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.17.02 PM.png \width18980 \height10140
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\
\pard\pardeftab720\partightenfactor0

\fs37\fsmilli18720 \cf2 Digital systems\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b circuit
\i0\b0  is a path through which electrical current can flow. In a circuit of switches, some wires have a high voltage, some have low voltage. High is labeled 1, low 0. (High is usually not 1 V; high could be 1.3 V, for example). A 
\i\b digital circuit
\i0\b0  has voltages that are treated as either high or low, and is typically built as a connection of switches. In contrast, an 
\i\b analog system
\i0\b0  has voltages that are treated as having infinite values like 0.15, 0.2, 0.333, etc. Digital circuits form the basis of useful systems like smartphones, computers, medical devices, and more.\
The word "system" means a set of connected things forming a complex whole. Thus, digital circuits are often referred to more generally as 
\i\b digital systems
\i0\b0 \
This material focuses on 
\i\b digital design
\i0\b0 : Creating digital circuits to achieve desired digital system behavior that converts digital inputs into desired digital outputs.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.19.44 PM.png \width14380 \height7200
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\pard\pardeftab720\partightenfactor0

\b0\fs40 \cf5 Why the name 'digital'?\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 The term "digit" literally means finger (or toe) ({\field{\*\fldinst{HYPERLINK "https://en.oxforddictionaries.com/definition/digit"}}{\fldrslt \cf8 see Oxford dictionary definition}}). Because people have a finite number of fingers, and digital circuits have a finite number of voltages (usually just two: high and low), the term "digital" is used. (Digit is also used to refer to a place in a number, such as 97 having two digits; that use of digit stems from people counting with their fingers).\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.20.01 PM.png \width7240 \height3520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.22.26 PM.png \width19500 \height11280
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Exploring further:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Transistor"}}{\fldrslt \expnd0\expndtw0\kerning0
Transistor (Wikipedia)}}\cf2 \expnd0\expndtw0\kerning0
\
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/CMOS"}}{\fldrslt \expnd0\expndtw0\kerning0
CMOS (Wikipedia)}}\expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\
\
\pard\pardeftab720\partightenfactor0

\b0\fs64 \cf2 3.3 Gates\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Building complex circuits from transistors is hard. In 1938, Claude Shannon described how transistor circuits could implement logic functions. Common 
\i\b logic functions
\i0\b0  include AND, OR, and NOT.\
A 
\i\b logic gate
\i0\b0  (or just 
\i\b gate
\i0\b0 ) is a transistor circuit that implements a logic function. The usefulness of gates will be seen later.\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 NOT gate (inverter)\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b NOT
\i0\b0  gate outputs 1 if the gate's input is 0, and outputs 0 if the input is 1. A NOT gate is also called an 
\i\b inverter
\i0\b0 . The following circuit with a pMOS and an nMOS transistor implements a NOT gate.
\b\fs26 \cf6 \
\pard\tx720\pardeftab720\partightenfactor0
\cf6 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.32.29 PM.png \width14480 \height9200
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\partightenfactor0
\cf6 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.32.59 PM.png \width10460 \height8980
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
3.3.3: NOT gate.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.33.38 PM.png \width19340 \height7660
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
AND gate\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 An 
\i\b AND
\i0\b0  gate outputs 1 only if both the gate's inputs are 1's. The following transistor circuit implements an AND gate.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.35.19 PM.png \width14820 \height9520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 One might ask why the AND circuit isn't implemented more simply, with 0 at the top and 1 at the bottom, omitting the NOT gate. The answer is that pMOS is a poor conductor of 0's, and nMOS a poor conductor of 1's, for physics reasons beyond our scope.
\b\fs26 \cf6 \
\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb4 3.3.5: CMOS AND gate.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.37.57 PM.png \width19220 \height23740
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.38.51 PM.png \width10280 \height9220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\pard\pardeftab720\partightenfactor0

\fs37\fsmilli18720 \cf2 OR gate\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 An 
\i\b OR
\i0\b0  gate outputs 1 if either, or both, of the gate's inputs is a 1. The following transistor circuit implements an OR gate.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.40.50 PM.png \width14880 \height9920
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.41.48 PM.png \width19300 \height9940
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.42.27 PM.png \width9980 \height7620
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\
\
\pard\pardeftab720\partightenfactor0

\fs37\fsmilli18720 \cf2 Logic gates summary\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 The following figure summarizes the NOT, AND, and OR gates.\
Note: OR and AND gates may have more than two inputs. OR outputs 1 if at least one input is 1. AND outputs 1 only if all inputs are 1's.\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.42.52 PM.png \width9620 \height5740
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb4 3.3.10: Logic gates: NOT, AND, and OR.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.43.44 PM.png \width20000 \height16960
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\b\fs26 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb4 3.3.11: Example systems implemented using one logic gate.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.45.56 PM.png \width19800 \height24420
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-14 at 10.46.16 PM.png \width19360 \height4700
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
3.4.7: Digital-designer shorthand notation for Boolean operators.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-17 at 8.23.39 PM.png \width19620 \height20920
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 3.4.8: Boolean equations for digital circuits.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-17 at 8.24.29 PM.png \width19460 \height12240
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 \expnd0\expndtw0\kerning0
Logic circuits\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 Digital circuits are sometimes called 
\b logic circuits
\b0  due to the roots in Boolean algebra's logic operations of AND, OR, and NOT.\
\pard\pardeftab720\partightenfactor0

\i0\b\fs37\fsmilli18720 \cf2 Boolean functions\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In Boolean algebra, a 
\i\b function
\i0\b0  is a relation of inputs' values to an output's values. A function can be described in various ways:\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
As English: When inputs a, b are both 1's, the output y is 1. Else, y is 0.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
As an equation: y = ab\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
As a table:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl2000 \trmarr14967 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw40\brdrcf0 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw40\brdrcf0 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth840\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw40\brdrcf0 \clbrdrb\brdrs\brdrw40\brdrcf0 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
a\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
b\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
y\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl2000 \trmarr14967 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth840\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw40\brdrcf0 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
0\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
0\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
0\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl2000 \trmarr14967 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth840\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw40\brdrcf0 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
0\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
1\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
0\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl2000 \trmarr14967 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth840\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw40\brdrcf0 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
1\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
0\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
0\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl2000 \trmarr14967 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth840\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw40\brdrcf0 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
1\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
1\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
1\cell \lastrow\row
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
As a circuit, as a drawing, a K-map (introduced later), etc.\
\pard\pardeftab720\partightenfactor0
\cf2 \
Distinguishing the words "expression", "equation", and "function" will be useful.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Table 3.4.3: Expressions, equations, and functions.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth1840\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx2880
\clvertalc \clcbpat10 \clwWidth1660\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx5760
\clvertalc \clcbpat10 \clwWidth14760\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 Item\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Notation\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Notes\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1720\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth1540\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth14640\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Expression\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 ab\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 An expression lacks an equal sign, and involves input variables.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1720\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth1540\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth14640\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Equation\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 y = ab\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 An equation has an =, with expressions of input variables on the right, and an output variable on the left. (In general math, both sides of an equation can be expressions, but in this material, the left side is usually just an output variable.)\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1720\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth1540\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth14640\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Function\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Various\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 A relation of input values to output values. Can be represented in various ways: equation, table, circuit, etc. A function may have more than one input, but has only one output.\cell \lastrow\row
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
3.4.9: Expressions, equations, and functions.\cb1 \
c, d are inputs, y is an output.\
1)\
Is c + d a function?\
No\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 c + d is just an expression of inputs. A function must relate inputs to a particular output.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
Is y = c + d a function?\
Yes\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The equation relates inputs c, d, to output y.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
Is y = c + d an equation?\
Yes\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 An equation is one representation of a function.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
Does this table represent a function?\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl2000 \trmarr1465 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw40\brdrcf0 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw40\brdrcf0 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw40\brdrcf0 \clbrdrb\brdrs\brdrw40\brdrcf0 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 c\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 d\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 y\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl2000 \trmarr1465 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw40\brdrcf0 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 0\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 0\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 0\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl2000 \trmarr1465 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw40\brdrcf0 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 0\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 1\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 1\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl2000 \trmarr1465 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw40\brdrcf0 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 1\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 0\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 1\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl2000 \trmarr1465 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth177\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw40\brdrcf0 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 1\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 1\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 1\cell \lastrow\row
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Yes\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The table relates the inputs c, d to output y. A table is one representation of a function. The table represents the same function as does the equation y = c + d.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 5)\
Is the following a function? \
\
y is 1 if either or both of c, d is 1. Else, y is 0.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Yes\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The English relates the inputs c, d to output y. English is one representation of a function. The English represents the same function as y = c + d.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 6)\
Is the following a function? \
\
Output y is 1 if both inputs are 0's, otherwise y is 0. Also, if both inputs are 1's, y is 1.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf2 No\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 A function defines exactly one output value for unique input values. The question's English is vague: The first sentence suggests two input 1's outputs 0 (the "otherwise y is 0" part), but the second sentence says two input 1's outputs 1. Thus, the English does not describe a function, and illustrates why more precise methods like equations and tables are preferred ways to describe a function.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 7)\
Is the following a function? \
\
Output y is 1 if both inputs are 0's.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 No\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 A function must include all input possibilities. The reader does not know what y should be for other input values like 0,1.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
3.5 Equations to/from circuits\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Equations to circuits\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 An equation is one way to represent a Boolean function. Another way is using a circuit.\
An equation can be converted to a circuit by converting each operation to a gate. Conversion is done first for items within parentheses. In a term like cd', NOT is converted before AND or OR. Converting behavior (like an equation) to a circuit is called 
\i\b design
\i0\b0 .
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-17 at 8.38.54 PM.png \width10160 \height7380
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
 
\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
3.5.2: Converting an equation to a circuit.\cb1 \

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-17 at 9.01.35 PM.png \width19900 \height19900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Example: Airbag enabler\
\pard\pardeftab720\partightenfactor0

\b0\fs40 \cf5 Figure 3.5.1: Airbags deployed.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 {{\NeXTGraphic embedded_image_1_e049e884-7ece-df93-a73c-f63dc765117a_yC9gfKI5fQFa5fkCSagA.png \width8380 \height6280 \noorient
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 Feedback?\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Cars have airbags that deploy during an accident to reduce injuries to occupants. Airbags can harm kids, and aren't needed for non-human objects. Thus, cars have sensors to help detect whether an airbag should be enabled by a large enough human being seated. In one car, a seat back sensor detects a heartbeat (h = 1). A seat bottom sensor indicates if over 60 pounds is detected (w = 1). A switch can be used to manually disable the airbags (d = 1). An output e indicates that the airbag is enabled (e = 1).\
A designer specifies the system as: e = hwd' (heartbeat detected, and enabled if weight over 60, and not manually disabled).
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-17 at 9.02.06 PM.png \width9920 \height5780
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-17 at 9.24.27 PM.png \width19680 \height22920
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Example: Aircraft lavatory sign\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Airplanes typically have a lighted sign to let passengers know if at least one of several lavatories (bathrooms) is available, so that passengers can choose to stay seated until a bathroom becomes available. A designer may think about the logic as follows: If all doors are locked, the sign should be off, otherwise the sign should be on. From that thought, the designer may create an equation.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-17 at 9.25.51 PM.png \width14800 \height9460
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-17 at 9.26.10 PM.png \width14260 \height8880
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-17 at 9.26.30 PM.png \width14400 \height8820
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-17 at 9.27.17 PM.png \width19520 \height6420
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Circuits to equations\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A circuit can be converted to an equation. Starting from the inputs, the process replaces gates by terms while moving towards the output, labeling gate outputs along the way. Converting a circuit to behavior (like an equation) is called 
\i\b analysis
\i0\b0 .
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-18 at 9.44.29 PM.png \width10120 \height7820
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-18 at 9.57.58 PM.png \width10120 \height7460
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-18 at 9.58.45 PM.png \width10140 \height7680
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-18 at 9.58.59 PM.png \width10440 \height7640
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
A circuit whose output value is determined solely by the present 
\i combination
\i0  of input values is called a 
\i\b combinational circuit
\i0\b0 . A combinational circuit is also called 
\i\b combinational logic
\i0\b0 .\
A circuit whose output values may depend on the past 
\i sequence
\i0  of input values, and not just the present input values, is called a 
\i\b sequential circuit
\i0\b0 . This material discusses sequential circuits later.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 3.5.7: Combinational vs. sequential circuits.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-18 at 10.00.18 PM.png \width19440 \height12360
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 3.5.1: Convert the equation to a circuit.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
4.1 NAND / NOR (universal gates)\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 NAND\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b NAND
\i0\b0  gate is the opposite (the NOT, hence the "N") of an AND gate, outputting 0 if all inputs are 1s; else the output is 1.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 1.20.08 PM.png \width9880 \height5460
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.1.1: NAND gates.\cb1 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 1.24.04 PM.png \width19400 \height7020
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
A NAND gate is a universal gate\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 NAND gates are popular due to having a simpler CMOS transistor circuit implementation than AND gates: Recall that an AND gate is built from a NAND transistor circuit followed by a NOT circuit.\
Furthermore, NAND gates are popular due to being a universal gate. A 
\i\b universal gate
\i0\b0  is a single gate type that can implement any combinational circuit. NAND can implement NOT, AND, and OR, as shown below, and is thus universal.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 1.31.45 PM.png \width14540 \height11000
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.1.3: Universal gates.\cb1 \
A NAND gate is a universal gate. TRUE 
\fs28 NAND gates can implement any combinational circuit.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
A NAND gate cannot implement a NOT gate. FALSE 
\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Just tie the NAND's inputs together to create a single input. \
0 NAND 0 = 1 \
1 NAND 1 = 0\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Inverting the output of a NAND gate produces an AND gate. True 
\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 (ab)'' = ab\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Inverting the inputs of a NAND gate produces an OR gate. \cf0  \cf2 True 
\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 (a'b')' = a'' + b'' = a + b
\fs32 \
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Converting to NAND gates\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 NAND being a universal gate enables chip makers to pre-fabricate a chip consisting of millions of NAND gates. Any circuit of NAND gates can be implemented simply by adding wires. Pre-fabricating the chip with AND, OR, and NOT gates would involve complexities like deciding how many of each gate to pre-fabricate, and where to place each gate type. Using NAND is much simpler.\
A chip with pre-fabricated gates is sometimes called a 
\i\b gate-array ASIC
\i0\b0 . 
\i\b ASIC
\i0\b0  is short for Application-Specific Integrated Circuit.\
Converting an AND/OR/NOT circuit to a NAND-only circuit enables implementation using fewer transistors as well as enables implementation on a gate-array ASIC. The conversion can be done simply by replacing each AND, OR, and NOT gate by the equivalent structure of NAND gates, then removing double-inversions.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 1.41.22 PM.png \width19540 \height16260
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 1.42.06 PM.png \width19500 \height6680
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
NOR\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b NOR
\i0\b0  gate is the opposite of an OR gate, outputting 0 if any of the inputs are 1s; else the output is 1.\
A discussion analogous to the above NAND discussion exists for NOR. Such discussion is omitted here. Briefly, NOR's transistor structure is simpler than OR's. NOR is also a universal gate. NOT: (a + a)' = a'a' = a' (NOR with inputs tied together). OR: ((a + b)')' = (a + b)'' = a + b (NOR followed by NOT). AND: (a' + b')' = a''b'' = ab (NOR with each input NOTed).\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 1.42.31 PM.png \width9940 \height4540
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.1.7: NOR gates.\cb1 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 2.32.00 PM.png \width19520 \height13280
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
4.2 XOR / XNOR gates\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 XOR\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A two-input 
\i\b XOR
\i0\b0  gate (for "exclusive OR") outputs 1 if the input values differ. Thus, y = a XOR b is equivalent to y = ab' + a'b. Digital designers often use the symbol 
\f1 \uc0\u8853 
\f0  for XOR, as in: y = a 
\f1 \uc0\u8853 
\f0  b.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 2.33.24 PM.png \width9680 \height4280
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.2.1: XOR.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 2.46.20 PM.png \width19500 \height7420
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
XNOR\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A two-input 
\i\b XNOR
\i0\b0  gate outputs 1 if the input values are the same. XNOR is the opposite (NOT) of an XOR gate, hence the "N". y = a XNOR b is equivalent to y = a'b' + ab.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 3.31.09 PM.png \width9520 \height4240
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.2.2: XNOR.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
1)\
1 XNOR 0 = 0\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Input values are not the same.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
1 XNOR 1 = 1\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Input values are the same.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
0 XNOR 0 = 1\
\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Input values are the same.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
In contrast to an XOR gate, an XNOR gate's drawing has a bubble drawn at the output.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The bubble indicates that the output is the opposite (the "NOT") of XOR. A bubble generally means that a signal is inverted.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Basic XOR and XNOR examples\
\pard\pardeftab720\partightenfactor0

\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 3.32.59 PM.png \width14540 \height8460
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 3.33.26 PM.png \width14460 \height7580
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 3.33.43 PM.png \width14520 \height6840
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.2.4: XNOR example: Park ride.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 3.39.29 PM.png \width13260 \height6100
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 3.39.48 PM.png \width13460 \height6220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 3.40.59 PM.png \width14200 \height6220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Multi-input XOR / XNOR\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 If XOR has more than two inputs, the output is 1 if the number of input 1's is odd. XNOR's output is 1 if the number of input 1's is even.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 3.41.40 PM.png \width9400 \height7760
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.2.5: Multi-input XOR and XNOR.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
1)\
0 XOR 1 = 1\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Odd number of 1's (1). XOR outputs 1 if number of input 1's is odd.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
1 XOR 1 = 0\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Not odd number of 1's (2).\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
0 XOR 1 XOR 0 = 1\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The expression is like a 3-input XOR (just like 0 * 1 * 0 is like a 3-input AND). XOR outputs 1 if the number of input 1's is odd; in this case, the number of input 1's is one, which is odd, so the output is 1.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
1 XOR 1 XOR 0 = 0\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Not an odd number of 1's (2).\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 5)\
1 XOR 1 XOR 1 = 1\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Odd number of 1's (3).\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 6)\
1 XOR 0 XOR 1 XOR 1 = 1\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Odd number of 1's (3). XOR outputs 1 if number of input 1's is odd, no matter how many inputs exist. This expression is like a 4-input XOR.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 7)\
1 XNOR 1 XNOR 1 = 0\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Not an even number of 1's (3). XNOR outputs 1 if number of input 1's is even.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 8)\
1 XNOR 1 XNOR 1 XNOR 1 = 1\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Even number of 1's (4). XNOR outputs 1 if number of input 1's is even, no matter how many inputs exist. This expression is like a 4-input XNOR.\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Example: Parity bit during data transmission\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Digital devices commonly communicate bits, such as via a USB cable or via Bluetooth. Ex: A webcam may communicate 010 to a computer. Electrical noise can change a bit from 0 to 1 (or vice-versa), such as 010 changing to 110.\
To help a receiver detect an erroneous communication, the sender sends an extra bit, called an 
\i\b even parity
\i0\b0  bit, such that the total number of 1's is even. So 010 is sent as 1 010, making the number of 1's even (2). 011 would be sent as 0 011.\
An XOR gate quickly computes the desired parity bit.\
On the receiving end, another XOR gate detects if the received bits have an odd number of 1's. If odd, the receiver rejects the data.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 3.59.36 PM.png \width14380 \height5740
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.2.6: Parity bits.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 4.01.07 PM.png \width19420 \height7300
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Deriving XNOR's expression using DeMorgan's Law\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 If you've studied DeMorgan's Law, the following shows how XNOR's ab + a'b' can be derived by complementing XOR's a'b + ab'.\
(a XOR b)' \
(a'b + ab')' \
(a'b)' \'b7 (ab')' DeMorgan's Law\
(a'' + b')(a' + b'') DeMorgan's Law (again)\
(a + b')(a' + b)\
aa' + ab + b'a' + b'b\
0 + ab + a'b' + 0\
ab + a'b'\
a XNOR b
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 4.02.11 PM.png \width19380 \height5840
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
4.3 Quine-McCluskey\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Basic algorithm\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 Quine-McCluskey
\i0\b0  is an algorithm for two-level logic optimization, suitable for computer automation due to using a tabular method (rather than graphical method like K-maps). Given a function's minterms, the algorithm's steps are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\i \cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Generate PI's:
\i0  Create a table of minterms, then pairwise check minterms for i(j + j') opportunities, combining into new terms in a new column, repeating with new terms until no more combinations can be made. Each term that wasn't combined with another (minterms or new terms) is a prime implicant (PI).\
\ls7\ilvl0
\i \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Find essentials: 
\i0 Draw a table with PI's as rows and minterms as columns, putting a mark to indicate a PI covers a minterm. For any column with only one mark, the PI for that row is essential so is added to the cover. All minterms covered by that PI are also checked off as covered.\
\ls7\ilvl0
\i \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Cover remaining: 
\i0 Select minimal unadded prime implicants to cover remaining minterms.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 5.54.57 PM.png \width19480 \height21000
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.3.2: Quine-McCluskey: Simple 3-variable example.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 5.55.40 PM.png \width19220 \height21700
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 5.56.53 PM.png \width19360 \height21620
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 \expnd0\expndtw0\kerning0
Grouping terms by number of uncomplemented literals\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 Note: The above algorithm checked all minterm pairs (and then all new term pairs in the next column, etc.) for an i(j + j') opportunity. However, for an i(j + j') opportunity to exist, the terms must differ by exactly one literal. As such, an improvement to the algorithm's efficiency is to only check pairs whose number of uncomplemented literals differs by one. Ex: a'b'c has one uncomplemented literal (c) while abc has three (a, b, c). Because the difference is not one, checking that pair can be skipped. Thus, for a given column, the Quine-McCluskey algorithm first sorts terms into a group with zero uncomplemented literals, a group with one, a group with two, etc. Then, for a given term, the algorithm only compares with terms in the next group.\
\
\
\pard\pardeftab720\partightenfactor0

\i0\fs40 \cf5 Petrick's method\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 Note: Step 3 requires an algorithm itself to find the minimum cover. A straightforward approach is called Petrick's method. The method is beyond this material's scope.\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\i0 \cf8 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://www.mathematik.uni-marburg.de/~thormae/lectures/ti1/code/qmc/"}}{\fldrslt \expnd0\expndtw0\kerning0
Online Quine-McCluskey minimizer}}\cf2 \expnd0\expndtw0\kerning0
 (T. Thormaehlen)\
\ls8\ilvl0\cf8 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://www.embedded.com/electronics-blogs/programmer-s-toolbox/4025004/All-about-Quine-McClusky"}}{\fldrslt \expnd0\expndtw0\kerning0
Article on Quine-McCluskey}}\cf2 \expnd0\expndtw0\kerning0
 (embedded.com)\
\ls8\ilvl0\cf8 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Petrick's_method"}}{\fldrslt \expnd0\expndtw0\kerning0
Petrick's Method}}\cf2 \expnd0\expndtw0\kerning0
 (Wikipedia)\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 4.4 Subtractors\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 A 
\i\b subtractor
\i0\b0  computes A - B, where A and B are N-bit numbers, such as 8-bit numbers. If numbers are represented using two's-complement representation, a subtractor can be built using an adder. Inverting B's bits and setting the adder's carry-in to 1 adds B's complement to A.\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 4.5 Comparators\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 A 
\i\b comparator
\i0\b0  compares two numbers, indicating whether the numbers are equal, or which number is greater. Same-length unsigned binary numbers can be compared by hand just like base ten numbers: Starting from the left, digits are compared until a difference is found.\
\
A 
\i\b carry-ripple comparator
\i0\b0  compares two N-bit numbers from left to right, with the result of each digit's comparison "rippling" to the next digit. For each digit, a 
\i\b one-bit comparator
\i0\b0  compares two bits a and b only if the eq input was 1 from the higher digit, else just passing along a gt 1 or an lt 1. The rightmost digit's output becomes the N-bit comparator's output. The name "carry-ripple" refers to the similarity of the comparator's implementation to a carry-ripple adder's implementation.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 6.49.50 PM.png \width19460 \height10220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 The correct output of leftmost digit ripples to next digit, and so on. Eventually the external outputs become correct.\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.5.4: Carry-ripple comparator.\cb1 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 6.50.30 PM.png \width19640 \height13120
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
A one-bit comparator can be implemented using combinational logic for each output. A designer could start by filling in a truth table with 5 inputs gti, lti, eqi, a, and b, and 3 outputs gto, lto, eqo. The truth table will have 2
\fs24 5
\fs32  = 32 rows. Alternatively, the designer can start directly with equations.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
eqo should be 1 if eqi is 1 AND a, b are the same. Thus: eqo = eqi(ab + a'b').\
\ls9\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
gto should be 1 if gti is 1, OR eqi is 1 AND ab are 10. Thus: gto = gti + eqi(ab').\
\ls9\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
lto should be 1 if lti is 1, OR eqi is 1 AND ab are 01. Thus: lto = lti + eqi(a'b).\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 4.5.1: 1-bit comparator circuit (used in questions below).
\fs32 \cf2 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 6.51.11 PM.png \width8640 \height6580
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 6.52.21 PM.png \width19500 \height17620
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 4.6 Multipliers (array-style)\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Assuming unsigned binary numbers, an N-bit 
\i\b multiplier
\i0\b0  multiplies two N-bit numbers to yield a 2N-bit product. A multiplier can be designed by mimicking multiplication by hand. Each multiplier digit is multiplied with the multiplicand and appended with 0's based on the digit's location, yielding a partial product, all of which are summed to yield the product.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.03.53 PM.png \width19500 \height13640
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.6.2: Multiplying binary numbers.\cb1 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.04.10 PM.png \width19440 \height13640
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
Assume a 4-bit array-style multiplier. (Note: Assume every gate input requires 2 transistors and ignore inverters.)\
1)\
Which component performs 1-bit multiplication?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 AND gate\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Adder\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 0 x 0 = 0, 0 x 1 = 0, and 1 x 0 = 0. Only 1 x 1 = 1. Thus, a x b is the same as a AND b.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
The product is the sum of partial products.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 True\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 False\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The multiplicand is multiplied by each bit in the multiplier, each yielding a partial product. All partial products are added to form the product.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
What is the size (in transistors) used to compute all partial products?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 16\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 64\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Each partial product requires 4 2-input gates. \
4 2-input gates per partial product x 4 partial products = 16 2-input gates.\
Each 2-input gate requires 2 \'b7 2 = 4 transistors. \
16 \'b7 4 = 64 transistors.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
What is the size (in transistors) of a 5-bit carry-ripple adder built from full adders, if a full adder has 50 transistors?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 100\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 250\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 50 transistors per full adder x 5 full adders = 250 transistors\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 5)\
What is close in size (in transistors) of a 4-bit array-style multiplier? Assume: 6-bit adder has 300 transistors, 7-bit adder has 350.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 250\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 1000\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \'a0 64 transistors (all partial products)\
\'a0\'a0\'a0\'a0\'a0 250 transistors (5-bit adder)\
\'a0\'a0\'a0\'a0\'a0 300 transistors (6-bit adder)\
\'a0\'a0\'a0+ 350 transistors (7-bit adder)\
\'a0\'a0 -----------------\
\'a0\'a0\'a0\'a0\'a0 964 transistors (4-bit array-style multiplier)\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 6)\
What is the delay (in gate-delays) to compute all partial products?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 1\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 4\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The 1-bit multiplications occur simultaneously, so only 1 gate-delay is needed to compute all partial products.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 7)\
What is the delay (in gate-delays) of a 5-bit carry-ripple adder built from full adders, assuming a full adder's delay is 2 gate-delays?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 2\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 10\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Because the carries ripple, 5 full adders yield 5 x 2 = 10 gate-delays.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 8)\
Which is closer to the total delay of a 4-bit array-style multiplier?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 10\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 15\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The partial products require 1 gate-delay. The 5-bit adder requires another 10 gate-delays; meanwhile the other adders are adding the sum bits as they appear. Delay is about 1 + 10 + 2 + 2 = 15 gate-delays.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.05.38 PM.png \width19380 \height22520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 4.7 Gray code\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Gray code: Only one bit changes\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Some systems put a sequence of bit codes on wires, such as counting up on three wires as in: 000, 001, 010, 011, 100, 101, 110, 111. Some problems exist for such sequences:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
When the next value changes two (or more) bits, a wrong value may briefly appear due to varying wire/gate delays for each bit. Ex: Instead of a change from 001 to 010, a change may be from 001 to 000 (briefly) to 010, due to a slower-changing middle bit.\
\ls10\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Due to the nature of digital circuitry, each bit change consumes power.\
\pard\pardeftab720\partightenfactor0
\cf2 For either problem, a sequence that minimizes bit changes is desirable. 
\i\b Gray code
\i0\b0  is a bit encoding for a value sequence where successive values differ by only one bit, named for its inventor Frank Gray. A 3-bit Gray code is 000, 001, 011, 010, 110, 111, 101, 100.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.26.51 PM.png \width14440 \height8440
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 .7.2: Gray code.\cb1 \
\
1)\
In Gray code, which value can follow 011?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 100\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 000\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 010\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Only the rightmost bit changed, from 1 to 0. Gray code allows one bit change.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
In Gray code, which value can follow 0100?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 1011\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 1100\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Only the leftmost bit changed, from 0 to 1. Gray code allows one bit change.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
Is the following a valid Gray code? 00, 01, 11, 10\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Yes\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 No\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Each successive value changes only one bit. Ex: 00 to 01 changes only the right bit, 01 to 11 changes only the left bit., and 11 to 10 changes only the right bit. Note also that 10 to 00 (wrapping around) only changes one bit too (the left bit).\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
Gray code wraps around, meaning the last value and first value also differ by only one bit. Do the first and last values of this encoding obey Gray code? 000, 001, ..., 101, 100\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Yes\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 No\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The sequence wraps around, so the sequence proceeds as 101, 100, 000, 001, etc. 100 to 000 changes in just one bit (the leftmost), so obey Gray code.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.27.47 PM.png \width19620 \height11600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Gray code uses\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 One use of Gray code is to sense the position of a rotating device, like a wheel, disk drive, or motor. For eight positions, three sensors can detect whether a magnet is below. The magnets can be configured so successive positions differ by one bit.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.28.31 PM.png \width14340 \height9440
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.7.4: Gray code in a wheel position sensor.\cb1 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.32.56 PM.png \width19560 \height18300
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Converting to/from Gray code\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 If a sending device will transmit a sequence of binary values, the device may wish to first convert those binary values to Gray code values. Conversely, a receiver may need to convert Gray code values to binary values. For values involving small numbers of bits, such conversion is straightforwardly done by starting with a truth table, and proceeding with standard combinational circuit design.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.33.19 PM.png \width14480 \height10040
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 Actually, a pattern emerges where Gray code bits can be obtained using a series of XORs, but that topic is beyond this material's scope.\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.7.6: Converting to/from Gray code.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.34.11 PM.png \width19200 \height5200
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Building a Gray code\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A three-bit Gray code can be built from the two-bit Gray code of 00, 01, 11, 10:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Two-bit Gray code values are appended in reverse: 00, 01, 11, 10, 
\i 10, 11, 01, 00
\i0 .\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
0s are prepended to the first half, 1s to the second half: 000, 001, 011, 010, 110, 111, 101, 100.\
\pard\pardeftab720\partightenfactor0
\cf2 Likewise, a four-bit Gray code can be built from a three-bit Gray code:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Append in reverse: 000, 001, 011, 010, 110, 111, 101, 100, 
\i 100, 101, 111, 110, 010, 011, 001, 000
\i0 \
\ls12\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Prepend 0s to first half, 1s to second half: 0000, 0001, 0011, 0010, 0110, 0111, 0101, 0100, 1100, 1101, 1111, 1110, 1010, 1011, 1001, 1000\
\pard\pardeftab720\partightenfactor0
\cf2 An N-bit Gray code can be built just by repeating the above process until reaching N bits.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.7.7: Building a Gray code: Step 1.\cb1 \
Given that a two-bit Gray code is 00, 01, 11, 10, in Step 1 of creating a 3-bit Gray code, order the four values that should be appended to form the 5th, 6th, 7th, and 8th values in the list.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ri880\sa160\partightenfactor0
\ls13\ilvl0\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.35.08 PM.png \width19260 \height11360
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.7.8: Building a Gray code: Step 2.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.35.43 PM.png \width19340 \height6720
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 4.8 Tradeoffs\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 A particular desired behavior, like adding two 4-bit numbers, may have alternative circuit implementations. A 
\i\b tradeoff
\i0\b0  is a design decision that improves one implementation metric while worsening another. An implementation 
\i\b metric
\i0\b0  is a measurement of an implementation's goodness. A common circuit metric is a circuit's size, with smaller size being better. Another is circuit delay, with less delay being better. Unfortunately, decreasing size usually increases delay, representing a tradeoff. Other common metrics include power and cost.\
In contrast to a tradeoff, a design decision that improves some metric(s) without worsening any others is called an 
\i\b optimization
\i0\b0 .\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.39.08 PM.png \width14540 \height8500
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.8.2: Tradeoffs.\cb1 \
Consider implementing a particular behavior. Indicate whether implementation B is a tradeoff compared to implementation A. (Units are intentionally omitted for this generic example).\
1)\
A's size is 100, delay is 2. \
B's size is 60, delay is 4.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Tradeoff\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Not a tradeoff\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Size improved, but delay worsened: A tradeoff.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
A's size is 100, delay is 2. \
B's size is 80, delay is 2.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Tradeoff\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Not a tradeoff\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Size improved, but delay is the same. B is simply better than A (considering just size and delay), so is an optimization.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.39.37 PM.png \width19480 \height7500
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Multiple approaches exist for determining circuit size. One approach estimates transistors, assuming every gate input requires 2 transistors, and ignoring inverters for simplicity. A 2-input gate requires 2 inputs \'b7 2 trans/input = 4 transistors. A 3-input gate requires 3 \'b7 2 = 6 transistors. A 4-input gate: 8 transistors.\
Wires also contribute to size, but ignoring wires as above is a common approximation.\
Although each gate may have a unique delay and wires also have delay, a quick approach for approximating circuit delay counts the number of gates from a circuit's inputs to output, known as 
\i\b gate delays
\i0\b0 . Inverters are ignored for simplicity.\
If multiple paths exist from inputs to output, the circuit's delay is the longest path, called the circuit's 
\i\b critical path
\i0\b0 .\
Real gates have differing delays. A 3-input gate has slightly longer delay than a 2-input gate. Wires also have delay. But counting gate-delays as above is a common approximation.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.43.47 PM.png \width19400 \height18620
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Size and delay can be estimated directly from an equation. Ex: y = abc + def has a 3-input AND for abc, another 3-input AND for def, and a 2-input OR, so size is 3\'b72 + 3\'b72 + 2\'b72 = 16 transistors. The circuit has a column of AND gates followed by an OR, so delay is 2 gate-delays.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.8.4: Estimating size and delay from an equation.\cb1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.44.34 PM.png \width19580 \height19500
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
4.9 Top-down design + examples\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Top-down design: Capture, convert\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Designers commonly follow a two-step design process:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0
\i\b \cf2 \cb11 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Capture
\i0\b0 : The task of precisely describing a circuit's desired behavior.\cb1 \
\ls14\ilvl0
\i\b \cb11 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Convert
\i0\b0  (aka 
\i\b implement
\i0\b0 ): The task of translating captured behavior into a circuit, possibly involving simplification.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
Capture: For combinational circuits, designers commonly capture behavior as truth tables or equations.\
Convert: A truth table can be converted to an equation first by ORing the minterms of each table row having an output 1. An equation can be converted to a circuit by multiplying out to product terms (if not already), with each term becoming an AND gate, followed by one OR gate.\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 4.9.1: Top-down design: Capture, convert.\
\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \cb9 Capture as a truth table: A truth table is one possible way to capture desired behavior. Another is an equation.\cb1 \
\cb9 Convert: Truth table to equation: Given that the designer started with a truth table, the designer will start the conversion by translating the truth table to equations. Such translation may simply be to include a minterm for each table row with a 1, and then OR those minterms.\
 Convert equation to circuit: Continuing as part of the conversion task, the designer can convert the equation to a circuit, using one AND gate per minterm, and then ORing those gates' outputs.\cb1 \
\cb9 Use the circuitL The design process is now done. The designer will need some way to implement the circuit (not discussed in this section), and then can use the circuit.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.47.22 PM.png \width19940 \height13060
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Example: Medical radiation therapy device\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A particular medical device delivers radiation to a patient to treat cancer. The device has two radiation strength levels, low (s = 0) and high (s = 1). The device has two radiation durations: short (d = 0) and long (d = 1). The device normally is used to deliver high strength for short duration, or low strength for long duration. A hardware safety component can be enabled (e = 1) that detects high strength for long duration and automatically turns off the device after a minute, but on rare occasion a radiation therapist may disable that component. To prevent accidents, a designer wishes to sound an alarm if the device is ever configured to high strength for long duration with the safety off.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.9.2: Medical radiation therapy device: Warning system.
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.50.23 PM.png \width14320 \height6860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 8.51.55 PM.png \width19640 \height22980
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
Exploring further:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls15\ilvl0\cf8 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Therac-25"}}{\fldrslt \expnd0\expndtw0\kerning0
Therac-25 }}\cf2 \expnd0\expndtw0\kerning0
: A well-known radiation therapy device with a bug that caused patient injury/death. (Source: Wikipedia)
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Example: Weight threshold\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A car's seat weight sensor provides three values a, b, c, to a system, indicating an object's relative weight in binary, ranging from 000 to 111 (heaviest). A designer wishes to design a "weight threshold" system that activates an airbag system (y = 1) if the weight is 101 (5) or more. For this system, the designer chooses to capture desired behavior with a truth table, then converts to a circuit.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 9.01.43 PM.png \width14780 \height8000
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.9.5: Weight threshold system.\cb1 \
Consider the weight threshold system above.\
1)\
To capture the system's behavior, the designer used _____ .\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 a truth table\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 an equation\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 For this system, the designer felt a truth table was preferred. The designer just had to list 1's in rows 5 and higher. Capturing as an equation would have required more thought.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
To convert the captured behavior to a circuit, the designer first _____ .\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 simplified\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 converted to an equation\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 A truth table can be easily converted to an equation, with one minterm for each row having a 1. No simplification was done (although simplification would have been beneficial).\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
To continue converting, the designer converted an equation to _____ .\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 gates\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 a truth table\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 A sum-of-products equation can be easily converted to gates by creating an AND gate for each product term, and then ORing those gates' output.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 9.02.21 PM.png \width19300 \height9840
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Example: Majority voter circuit\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Some systems are more prone to errors due to complexity or noise. And, some systems cannot tolerate errors. Ex: Spacecraft have complex control systems, are prone to errors due to noise/vibrations/heat, and may crash or explode if digital circuit outputs are erroneous. Such systems often have three independent calculations of output, and then use a circuit to take a majority vote, an arrangement known as 
\i triple modular redundancy
\i0 .\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 9.03.24 PM.png \width19560 \height9140
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
Consider the example above.\
1)\
The gray boxes on the left each _____ .\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 are majority voter circuits\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 carry out different functions\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 carry out the same function\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Designers may have three instances of the same component, or may have designed each independently (by different designers).\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
The majority voter circuit has three inputs. What other number of inputs would be most reasonable?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 One\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Five\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Twenty nine\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 With an odd number of inputs, the voter can always take the majority. However, five may be excessive; three is most common.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
If the inputs to the majority voter circuit are 1 0 1, the output should be _____ .\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 0\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 1\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Error\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Two 1's exist vs. one 0, so the voter circuit choose 1 (the majority).\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
The inputs to the voter circuit are _____ .\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 always the same\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 always different\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 usually the same\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Under normal circumstances, all three components output the same value. In rare situations, an error may occur, in which case the voter circuit outputs the majority value of the inputs.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 5)\
The voter circuit _____ correct output.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 helps yield\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 guarantees\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Computing three values and outputting the majority greatly reduces, but doesn't eliminate, erroneous output. In a bad situation, two (or even three) components might output a wrong value, causing the voter to output a wrong value too.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 9.04.10 PM.png \width19440 \height16380
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Exploring further:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf8 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Triple_modular_redundancy"}}{\fldrslt \expnd0\expndtw0\kerning0
Triple modular redundancy}}\cf2 \expnd0\expndtw0\kerning0
 (Source: Wikipedia)
\fs28 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
4.10 Carry-lookahead adders\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 A carry-ripple adder has a drawback of long delay, due to each digit having to wait for carries to ripple through earlier digits. A 
\i\b carry-lookahead adder
\i0\b0  uses logic to quickly pre-compute the carry for each digit, and thus has less delay than a carry-ripple adder, but larger size, representing a tradeoff.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 9.32.13 PM.png \width14840 \height7700
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.10.2: Adder tradeoffs.\cb1 \
\
1)\
Which adder type has shorter delay?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Carry-lookahead\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 A carry-lookahead adder pre-computes all carry bits at the same time, without any rippling.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
Which adder type requires fewer gates?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Carry-ripple\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The carry-lookahead adder's lookahead logic is fast but uses many gates.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \
The basic lookahead idea is to create a circuit that quickly computes whether a digit's output carry will be 1 or 0. Each digit's carry-out circuit makes use of two values, g and p.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
When a AND b are both 1's, the digit 
\i\b generates
\i0\b0  a carry-out of 1 regardless of the carry-in. Let g = ab.\
\ls17\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
When a OR b is 1, the digit sets carry-out to 1 if the carry-in is 1, akin to the digit 
\i\b propagating
\i0\b0  the carry-in to carry-out. Let p = a + b.\
\pard\pardeftab720\partightenfactor0
\cf2 With those two values, the expression for each digit's carry-out is co = ab + (a + b)ci = g + p\'b7ci. Each digit's carry-in can then be substituted with the digit-to-the-right's carry-out (being connected), yielding two-level logic for each carry-in bit. Thus, all carry bits can be computed without any rippling, at the expense of the large number of gates in the carry-lookahead logic.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 9.34.22 PM.png \width19480 \height13480
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 9.35.14 PM.png \width19520 \height13380
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
4.10.5: Carry lookahead size and delay.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-25 at 9.35.47 PM.png \width19580 \height16100
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
The lookahead logic gets dramatically larger for wider adders. (And slower too in reality, because for example 18-input gates are much slower than 2-input gates.) Thus, a designer might construct a 32-bit adder by connecting 8 4-bit carry-lookahead adder blocks in carry-ripple fashion, for example.\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 5.1 Programmable processor concept\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Programmable processor overview\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b programmable processor
\i0\b0  carries out desired functionality by executing instructions from an instruction memory. Unlike a typical circuit that carries out the same functionality repeatedly, a programmable processor can be configured to carry out nearly any functionality by putting different instructions in the instruction memory. Ex: A single programmable processor can be programmed to carry out the functionality of a calculator, a web browser, and a word processor. Storing instructions into an instruction memory is known as 
\i\b programming
\i0\b0  the memory, and those instructions are known as a 
\i\b program
\i0\b0 .\
The processor executes one instruction at a time, proceeding to the next instruction when done.\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 5.1.1: Simple programmable processor.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-25 at 9.55.01 PM.png \width19320 \height12020
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 A programmable processor includes:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0
\i\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
CPU
\i0\b0 : A 
\i\b central processing unit
\i0\b0  executes instructions by controlling an ALU, register file, and other hardware components.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls18\ilvl1
\i\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f2\i0 \uc0\u9702 
\f0\i 	}\expnd0\expndtw0\kerning0
ALU
\i0\b0 : A component that performs arithmetic and logic operations, like addition or subtraction, on data in the register file. Short for 
\i\b arithmetic logic unit
\i0\b0 .\
\ls18\ilvl1
\i\b \kerning1\expnd0\expndtw0 {\listtext	
\f2\i0 \uc0\u9702 
\f0\i 	}\expnd0\expndtw0\kerning0
Register file
\i0\b0 : A set of registers that holds temporary data accessible by the ALU. A 
\i\b register
\i0\b0  is a digital circuit that can store multiple bits, such as 32 bits.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0
\i\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Instruction memory
\i0\b0 : A memory that holds instructions.\
\ls18\ilvl0
\i\b \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Data memory
\i0\b0 : A memory that holds data used by the instructions.\
\pard\pardeftab720\partightenfactor0
\cf2 A 
\i\b memory
\i0\b0  is a digital circuit that holds relatively large amounts of data, often organized as bytes with each having a unique 
\i\b address
\i0\b0 , where each byte can either be read ("load") or written ("store"). Ex: A memory may hold 1024 bytes, with addresses 0, 1, 2, ..., 1023. Common memory sizes range from 1 Kbyte to 4 Gbyte, while typical register files are smaller with perhaps 128 or fewer registers.\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Refer to the above animation.\
1)\
What is the value in data memory location 5002?\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 40
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 40\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 The value in the box next to label 5002 is 40. Thus, data memory location 5002 holds value 40.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
What is the value in t1 after the instruction Load t1 DM[5002] executes?\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 40
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 40\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 The instruction reads the data held in DM[5002], which is 40, and writes that 40 into t1.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
The first Add instruction adds the values in t0 and t1, and writes the result in what register?\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 t5
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 t5\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 The instruction Add t5 = t0 + t1 adds the values in t0 and t1 (so 20 + 40) and writes the result in t5.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
How many executed instructions copied data from the data memory to the register file during the animation?\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 2
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 2\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 The first two instructions are Load instructions, which copy data from data memory to the register file.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 5)\
How many executed instructions used the ALU during the animation?\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 1
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 1\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 The Add instruction is the only instruction in this program that uses the ALU. Only one Add instruction was executed.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 6)\
How many total instructions were executed during the animation?\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 4
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 4\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 Load, Load, Add, and Store were executed, so 4 were executed. Two more instructions are shown in the instruction memory, but weren't executed in the animation.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 7)\
The CPU contains a register file and what other component?\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 ALU
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 ALU\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 The ALU carries out arithmetic and logic operations. ALU stands for "Arithmetic Logic Unit".\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 8)\
A typical register file has 1G or more registers. Type true or false.\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 false
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 False\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 A register file should be small to fit next to an ALU and thus support fast accesses (among other reasons). A typical register file has fewer than 128 registers, perhaps just 32 registers for example. 1G (1 billion) is more appropriate for memory.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \
Note that when the processor reads data from the data memory or register file, the data is copied, not removed.\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \
Instructions\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A processor executes instructions in sequence, one at a time. The instruction order thus matters.
\fs64 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 2.02.33 PM.png \width19720 \height18520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 A processor may support hundreds of possible instruction types. Those instruction types can usually be classified into three categories:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls19\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
A 
\i\b data transfer instruction
\i0\b0  copies data among the data memory and register file.\
\ls19\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
An 
\i\b ALU instruction
\i0\b0  operates on data.\
\ls19\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
A 
\i\b branch instruction
\i0\b0  specifies the location of the next instruction to execute, being different from the next instruction in instruction memory.
\fs64 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 2.04.29 PM.png \width19480 \height9480
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Each instruction typically is encoded into a limited number of bits, such as 32 bits. Using a small limited number of bits per instruction ensures more instructions can fit into the memory, and keeps the processor's circuit simple and fast. Some bits may represent the instruction type (like Load or Add), other bits may indicate the registers involved (like t0 or t1), and others a data memory address (like 5005). As such, the number of instruction types is limited. Ex: If the instruction type is represented in 8 bits, then only 2
\fs24 8
\fs32  = 256 instruction types are possible.\
Thus, a processor's instruction types are limited and kept basic, like the basic Add, Store, and Load instructions seen above. A programmer must achieve desired functionality using just those relatively-few instruction types.\
The set of instruction types supported by a particular processor is called the processor's 
\i\b instruction set
\i0\b0 . A program written using a processor's instructions is called an 
\i\b assembly language program
\i0\b0 , in contrast to programs written in higher-level languages like C, C++, Java, or Python.
\fs64 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 2.51.21 PM.png \width19580 \height22920
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Register file\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Each register in the register file has a name. The 
\i\b zero register
\i0\b0  is a read-only register that always holds the value 0. In the animation above, t0 ... t6 refer to the register file's next seven registers, which can be read and written by instructions.\
An ALU instruction may read a register's value and write the operation's result into that very same register.
\fs64 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 5.1.6: Register file: Reading and writing.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 2.54.40 PM.png \width14380 \height8620
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 2.55.04 PM.png \width14240 \height8860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 5.1.7: Registers.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 3.36.29 PM.png \width19560 \height18420
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 \expnd0\expndtw0\kerning0
Reset\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 A 
\b reset
\b0  is an input that when asserted causes a circuit to enter a known state. A processor's reset causes 0's to be written to all registers, including the register file and program counter. So, after the reset, the processor executes the instruction at address 0. A 
\b power-on-reset
\b0  circuit resets the processor when power is first applied.
\i0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 \expnd0\expndtw0\kerning0
Register file and data memory\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 When displaying data values in registers or memory, this material may show: 1) a 0 for register if the register is known to be 0, such as on reset, 2) a blank location if the value is unknown, such as memory location that has not yet been written, or 3) a grayed value representing a previous value for a register or memory location that has been written a new value. Additionally, all registers within the register file may not be shown, instead showing only those registers that are relevant for each example.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\i0\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 3.37.35 PM.png \width13020 \height5520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\i\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\i0\b\fs37\fsmilli18720 \cf2 MIPS\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 MIPS
\i0\b0  is a processor that was popular in various computers in the 1990's, and is found in some embedded computing devices today. MIPS is presently one of the most popular processors for learning assembly language programming, and also for learning processor design. MIPS is known for having a simple and elegant instruction set, which in turn enables simple and fast processor designs.\
MIPS' instruction set has just over 100 instructions, and each instruction is 32 bits. The MIPS register file has 32 registers, each being 32 bits. Memory addresses are 32 bits. Memory can be accessed by words (4 bytes), half words (2 bytes), or bytes.\
For educational purposes, this material teaches a greatly-simplified version of MIPS, known as 
\i\b MIPSzy
\i0\b0 , using a small subset of the MIPS instruction set, and using a register file with only 8 primary registers. MIPSzy only allows memory to be accessed by words (4 bytes).\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 3.41.28 PM.png \width19660 \height9980
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
MIPS is the most popular processor in commercial products today.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 False\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 MIPS is popular in education due to having a relatively straightforward instruction set, enabling students to focus on important concepts rather than tedious non-essential details.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
The register file in MIPS has 32 registers.\
True\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The 32 registers have names like $s0 and $t5 that will be introduced later.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
The register file in MIPSzy has 32 registers.\
False\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Unlike MIPS, which has 32 registers, MIPSzy has only 8 primary registers in the register file (plus a couple special purpose registers, to be described later). Having fewer registers eases the learning of how processors work and are built. A real processor needs more registers for faster program execution.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
Exploring further:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls20\ilvl0\cf8 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "https://imgtec.com/mips"}}{\fldrslt \expnd0\expndtw0\kerning0
MIPS Processor, Imagination Technologies.}}\cf2 \expnd0\expndtw0\kerning0
\
\ls20\ilvl0\cf8 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "https://www.zybooks.com/catalog/cod-mips/"}}{\fldrslt \expnd0\expndtw0\kerning0
Computer Organization and Design (5e) - Interactive Version (MIPS)}}
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.2 addi, add: Add instructions\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Add with immediate instruction: addi\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A program often needs to add a specific value to a register, such as adding register $t3 and 4. An 
\i\b add immediate
\i0\b0  (
\i\b addi
\i0\b0 ) instruction adds a register's value and an immediate value. An 
\i\b immediate
\i0\b0  is a value specified within an instruction. In MIPS, the immediate is a 16-bit number that can range from -32,768 to 32,767. A MIPS addi instruction format is shown below, which computes regA = regB + immediate.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 addi regA, regB, immediate\cf0 \
\pard\pardeftab720\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.06.24 PM.png \width14620 \height8720
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.06.30 PM.png \width14480 \height8520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.07.06 PM.png \width14420 \height8580
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.07.29 PM.png \width14420 \height8460
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 \expnd0\expndtw0\kerning0
PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.2.2: addi instruction.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.14.40 PM.png \width19520 \height19340
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
Commonly, a specific value needs to be written to a register. The addi instruction format below computes regA = immediate:\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 addi regA, $zero, immediate\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 Since $zero always holds the value 0, the sum is equal to the immediate value, and the immediate value is written to the register.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.16.55 PM.png \width19520 \height14600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Add instruction: add\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 An 
\i\b add instruction
\i0\b0  computes the sum of two register values, and writes the sum into a register. A MIPS add instruction format is shown below, which computes regA = regB + regC.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 add regA, regB, regC\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 The register written by an instruction is called the 
\i\b destination register
\i0\b0 . A register read by an instruction is called a 
\i\b source register
\i0\b0 . For the add instruction, regA is the destination register, and regB and regC are source registers.\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.2.4: Add instruction.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.36.17 PM.png \width19360 \height19740
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 \expnd0\expndtw0\kerning0
Table 5.2.1: Instruction summary: addi, add.\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.36.39 PM.png \width19120 \height4780
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
addi Add immediate: Adds register $b and the immediate value C, and writes the sum into register $a.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \

\fs32 \cf2 \expnd0\expndtw0\kerning0
Add: Computes the sum of registers $b and $c, and writes the sum into register $a.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.2.1: Add immediate and add instructions.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.40.10 PM.png \width14500 \height10840
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.40.58 PM.png \width14400 \height11980
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.42.16 PM.png \width14480 \height13560
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.43.13 PM.png \width14480 \height14760
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.44.00 PM.png \width14700 \height15680
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 4.46.50 PM.png \width14580 \height12680
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.3 sub, mul: Subtraction and multiplication instructions\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb12 \expnd0\expndtw0\kerning0
Instructor note:\cb1 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0
\cf2 \cb12 Note: "mul" is the first of many MIPS pseudoinstructions that are used in the chapter.\cb1 \
\cb12 Therefore, it is important to know which instructions are real and which are pseudo. If you are ever in doubt, all real MIPS instructions can be found in the MIPS Instruction Reference here: http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\fs32 \cf2 \cb12 \expnd0\expndtw0\kerning0
http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Subtract instruction: sub\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b substract instruction
\i0\b0  (
\i\b sub
\i0\b0 ) computes the difference of two register values, and writes the difference into a register. A MIPS subtract instruction format is shown below, which computes regA = regB - regC.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 sub regA, regB, regC\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.00.51 PM.png \width19520 \height16860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Multiply instruction: mul\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b multiply instruction
\i0\b0  (
\i\b mul
\i0\b0 ) computes the product of two register values, and writes the product into a register. A MIPS multiply instruction format is shown below, which computes regA = regB * regC. The multiply instruction computes a 32-bit product, and ignores any overflow that may result from multiplying two 32-bit values.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 mul regA, regB, regC
\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.01.55 PM.png \width19560 \height14060
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 \expnd0\expndtw0\kerning0
Pseudoinstructions\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 A 
\b native instruction
\b0  is an assembly instruction directly supported by a processor's hardware. A 
\b pseudoinstruction
\b0  is an assembly instruction that must be replaced by one or more native instructions before being executed. Pseudoinstructions are used to keep the number of native instructions small, which leads to more efficient processor hardware, while providing programmers a large set of instructions for common operations. The MIPS mul instruction is a pseudoinstruction implemented using mult and mflo native instructions, discussed elsewhere.
\i0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.03.21 PM.png \width19700 \height17440
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Instruction format summary: sub, mul\
\pard\pardeftab720\partightenfactor0

\b0\fs40 \cf5 Table 5.3.1: Instruction summary: sub, mul.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth1503\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx2160
\clvertalc \clcbpat10 \clwWidth2808\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clcbpat10 \clwWidth10283\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx6480
\clvertalc \clcbpat10 \clwWidth3384\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 Instruction\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Format\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Description\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Example\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2688\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth10163\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3264\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 sub\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 sub $a, $b, $c
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Subtract: Subtracts $c from $b, and writes the difference into register $a.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 sub $t3, $t2, $t5
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2688\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth10163\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3264\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 mul\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 mul $a, $b, $c
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Multiply: Multiplies register $b and $c, and writes the lower 32-bits of the product into register $a.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 mul $t3, $t2, $t1
\f0 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.04.19 PM.png \width14400 \height11740
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.04.42 PM.png \width14820 \height11580
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.05.41 PM.png \width14540 \height13260
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.06.27 PM.png \width14380 \height13600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.4 lw, sw: Load and store instructions\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Load instruction: lw\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b load instruction
\i0\b0  copies data from memory into a register. A MIPS load instruction format is shown below. Another section discusses the reason for the 0( ) around the memory-address.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 lw register 0(memory-address)\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 MIPS register names start with a $. MIPSzy supports 8 registers. Writeable registers are $t0, $t1, ..., $t6. A special $zero register always has the value 0 and can only be read, not written.\
The load instruction's memory-address is a register whose value is the memory address from which data is copied.\
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Load word\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 lw is short for "load word", in contrast to just loading a byte (a word is four bytes).
\i0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.14.11 PM.png \width19620 \height24140
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Store instruction: sw\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b store instruction
\i0\b0  copies data from a register to memory. A MIPS store instruction format is shown below. Another section discusses the reason for the 0( ) around the memory-address.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 sw register 0(memory-address)
\f0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.15.33 PM.png \width19560 \height19640
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Instruction format summary: lw, sw\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 The condensed instruction format below specifies all registers using $ followed by a single character. Ex: $a.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Table 5.4.1: Instruction summary: lw, sw.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth1503\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx2160
\clvertalc \clcbpat10 \clwWidth2424\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clcbpat10 \clwWidth9430\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx6480
\clvertalc \clcbpat10 \clwWidth2808\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 Instruction\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Format\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Description\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Example\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2304\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth9310\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2688\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 lw\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 lw $a, 0($b)
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Load word: Copies data from memory at address $b to register $a.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 lw $t3, 0($t6)
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2304\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth9310\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2688\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 sw\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 sw $a, 0($b)
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Store word: Copies data from register $a to memory at address $b.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 sw $t1, 0($t3)
\f0 \cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.16.25 PM.png \width14420 \height11120
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.17.19 PM.png \width14460 \height11020
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.21.14 PM.png \width14520 \height15060
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.23.04 PM.png \width14480 \height12300
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.5 Load and store with offsets\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Load instruction with offset\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 An earlier section introduced the load instruction, which copies data from data memory into a register: 
\f3 \
lw register 0(memory-address)\

\f0 A memory address alone requires 32 bits, so cannot fit entirely within a 32-bit MIPS instruction. Thus, the memory address is held in a register.\
Frequently, memory accesses are offsets from a base memory address, such as 5032 + 4, 5032 + 8, etc. Thus, the actual memory address is formed by adding a base memory address and an offset: 
\f3 \
lw register offset(base-address)\

\f0 Ex: If $t6 contains 5032, then 
\f3 lw $t0, 4($t6)
\f0  copies the value in memory address 4 + 5032, or 5036, into $t0.\
An 
\i\b offset
\i0\b0  is an amount added to a base address to form a final address. In MIPS, the offset is a 16-bit number so can range from -32,768 to 32,767.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.26.59 PM.png \width14400 \height8520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.27.24 PM.png \width14440 \height8320
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.27.54 PM.png \width14440 \height8460
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.28.10 PM.png \width14440 \height8400
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.32.05 PM.png \width19620 \height19860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.32.37 PM.png \width19280 \height23460
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.32.57 PM.png \width19340 \height3580
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 5.33.55 PM.png \width14700 \height13580
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.04.39 PM.png \width14660 \height13280
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.06.02 PM.png \width14480 \height10760
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.08.38 PM.png \width14520 \height11060
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.09.25 PM.png \width14500 \height14940
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.10.40 PM.png \width14400 \height12280
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.11.23 PM.png \width14520 \height17140
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.12.30 PM.png \width14520 \height13220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.13.26 PM.png \width14560 \height13420
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Store with offset\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 An earlier section introduces a store instruction, which copies data from a register to memory. As with a load instruction, the memory address is formed by adding a base-address plus an offset.
\f3 \
sw register offset(base-address)\
\pard\pardeftab720\partightenfactor0

\f0\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.5.3: Store instruction with offset.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.21.31 PM.png \width19480 \height20520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.25.20 PM.png \width19500 \height11400
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Instruction format summary: lw and sw with offsets\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In the condensed instruction format below, 
\f3 C
\f0  is a literal value, like 20 or -4.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Table 5.5.1: Instruction summary: lw and sw with offset.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth1503\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx2160
\clvertalc \clcbpat10 \clwWidth2424\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clcbpat10 \clwWidth9974\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx6480
\clvertalc \clcbpat10 \clwWidth3000\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 Instruction\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Format\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Description\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Example\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2304\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth9854\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 lw\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 lw $a, C($b)
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Load word: Copies data from memory at address $b + C to register $a.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 lw $t3, 20($t6)
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2304\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth9854\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 sw\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 sw $a, C($b)
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Store word: Copies data from register $a to memory at address $b + C.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 sw $t1, -4($t3)
\f0 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.6 Comments\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 A 
\i\b comment
\i0\b0  is text in a program intended just for humans reading the program, rather than for the processor executing the program. In MIPS, a comment is any text on a line following the # symbol.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 lw $t1, 0($t6)     # This is a comment\
add $t1, $t1, $t1  # Another comment\
# And yet another comment\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.6.1: Comments.\cb1 \
Given the following code, indicate which is a comment. \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 lw $t2, 0($t6)  # Load DM[2000]\
# add $t2, $t3, $t4\
# FIXME: Finish the\
program soon\
#####\
# 6/3/16\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \
1)\
lw\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Not a comment\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 lw does not appear after a # on a line.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
Load DM[2000]\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Comment\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 That text appears after # on a line, so the text is ignored.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
add $t2, $t3, $t4\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Comment\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Though a valid instruction, the instruction appears after # on a line, so is treated as a comment. Programmers commonly "comment out" lines temporarily while debugging or initially writing some code.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
FIXME: Finish the\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Comment\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The text appears after # on a line. # happens to be the first item on the line, which is OK. Note: Programmers often use "FIXME" in a comment to remind themselves of tasks to be completed.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 5)\
program soon\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 Not a comment\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The line has no #, and thus this text is not a comment. Instead, this text will yield an error because the text is not a valid instruction.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 6)\
####\
Not a comment\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The line begins with #, followed by ####. Those latter four #'s are a comment. The fact that those symbols are themselves #'s is irrelevant; # symbols can appear within comments just like other symbols. Such a sequence of #'s is commonly used to visually separate code parts.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 7)\
6/3/16\
Comment\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Comments can include any text, such as numbers like 6 or 3, symbols like /, letters, etc.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.7 A small assembly program\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Creating and executing a small program\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Given desired behavior, a programmer must create an instruction sequence implementing such behavior, using only the processor's available instructions.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.44.54 PM.png \width19420 \height10240
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.46.07 PM.png \width19540 \height11980
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.46.48 PM.png \width19440 \height10540
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Conserving registers in assembly programs\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Registers are limited, so programmers should conserve registers. If a value in a register is not read later, the register can be reused by writing another value. Ex: Assume $t4 holds a memory address used in a lw instruction. If that memory address is not used by another instruction, $t4 can be reused to hold a different memory address or used to hold the result of a computation.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.47.59 PM.png \width14580 \height8480
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.7.5: Conversing register in assembly programs.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.48.27 PM.png \width19640 \height18800
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 6.57.55 PM.png \width14560 \height17860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 7.03.24 PM.png \width14460 \height14060
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 7.13.05 PM.png \width14480 \height20920
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 7.17.13 PM.png \width14400 \height16240
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 7.31.30 PM.png \width14480 \height21900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 7.35.00 PM.png \width14440 \height17160
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.8 Assignments\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb12 Instructor note:\cb1 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0
\cf2 \cb12 Two important notes on this chapter:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\parhyphenfactor20\partightenfactor0
\ls21\ilvl0\cf2 \cb12 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
As stated more clearly in the next chapter, the lw for a variable can be done once at the beginning of a series of references for that variable, and the sw once at the end. This is very important for performance, and often throughout this course we will assume that a variable has already been assigned to a register.\cb1 \
\ls21\ilvl0\cb12 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
This section assigns variables to temporary registers, however in general that is not good practice. They should be saved in $s registers, because these are conserved across procedure calls.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Variables\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 C is a popular high-level programming language. Some languages like C++, Java, C#, and Javascript have roots in C. A 
\i\b compiler
\i0\b0  converts a high-level language like C into assembly. In this section and others, the reader is assumed to know C.\
In C, a variable represents a location in memory. An assignment like 
\f3 x = 7;
\f0  assigns x's memory location with the value 7.\
In assembly, that variable's location can be written to a register. The value 7 can be written to another register. The assignment can then be carried out using a store word instruction with those two registers.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 7.52.41 PM.png \width14540 \height6360
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 7.56.15 PM.png \width19640 \height22120
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Assignments\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In C, 
\f3 y = x;
\f0  assigns variable y with the value of variable x. In assembly, that assignment requires first loading a register with x's value, then storing that register's value into y. 
\fs24 naming\cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 7.57.58 PM.png \width14520 \height7520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.8.4: Assigning a variable with the value of another variable.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 7.58.53 PM.png \width19700 \height13980
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.8.1: Variable assignments.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 8.01.36 PM.png \width19500 \height14040
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 8.05.46 PM.png \width19340 \height15560
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.9 Expressions\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Simple arithmetic expressions\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In C, a statement may assign a variable with the result of a simple arithmetic expression, such as z = x + y. In assembly, x and y are loaded into registers, an arithmetic assembly instruction computes the expression's result, and the result is then stored into z.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 8.37.03 PM.png \width14920 \height8040
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 8.37.37 PM.png \width19620 \height14740
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.9.3: Simple arithmetic expression: Variable plus literal.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 8.38.13 PM.png \width19580 \height14320
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Sequences of arithmetic operations\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Sometimes C statements write a variable several times. Intermediate results need not be stored into memory and may instead just be written to a register.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.9.1: Intermediate writes to a variable need not be stored into memory.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Assume x's value is in $t3, y's value is in $t4, and z's address is in $t2.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth5236\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx2880
\clvertalc \clcbpat10 \clwWidth7055\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx5760
\clvertalc \clcbpat10 \clwWidth5216\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 C statements\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Inefficient assembly\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 More efficient assembly\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalt \clshdrawnil \clwWidth5116\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth6935\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalt \clshdrawnil \clwWidth5096\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3\fs24 \cf2 z = x + y;\
z = z + 1;\cf0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 add $t5, $t3, $t4  # $t5 = x + y\
sw $t5, 0($t2)     # Store into z\
lw $t5, 0($t2)     # Load z\
addi $t5, $t5, 1   # $t5 = z + 1\
sw $t5, 0($t2)     # Store into z\cf0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 add $t5, $t3, $t4  # $t5 = x + y\
addi $t5, $t5, 1   # $t5 = $t5 + 1\
sw $t5, 0($t2)     # Store into z\cf0 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
In the assembly above, the intermediate result of x + y need not be stored into z, since that result in z would just be overwritten by the result of the next instruction (addi) that adds 1 and stores the new result into z.\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.9.4: Intermediate results.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 8.39.20 PM.png \width19340 \height23340
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
More complex expressions\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A C statement with a simple expression having one operator, like 
\f3 w = x + y
\f0 , can be converted to an assembly instruction, like 
\f3 add $t5, $t3, $t4
\f0 . To convert a statement having a more complex expression, like 
\f3 w = x + y + 3
\f0 , the statement may first be rewritten as several simpler statements, like 
\f3 tmp1 = x + y
\f0  followed by 
\f3 w = tmp1 + 3
\f0 . (tmp1 is a temporary variable used to enable such a rewrite). Each statement can then be converted to assembly.\
Precedence rules should be obeyed, such as the * operator having higher precedence than +, and expressions within parentheses having higher precedence. For equal precedence operators, C specifies left-to-right evaluation. Ex: For x + y + 3, expression x + y should be computed first.\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.9.5: A statement with a more complex expression can be rewritten as simpler statements, each then converted to assembly.\cb1 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 8.45.58 PM.png \width14440 \height9660
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.9.6: Rewriting a statement into statements with one-operator expressions.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 8.49.20 PM.png \width19780 \height24200
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.07.18 PM.png \width14580 \height20500
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.14.10 PM.png \width14360 \height20660
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.18.39 PM.png \width14560 \height16760
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.25.31 PM.png \width14460 \height22020
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.28.14 PM.png \width14640 \height18000
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.35.10 PM.png \width14400 \height17520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.38.31 PM.png \width14760 \height24020
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.41.22 PM.png \width14560 \height19680
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.10 Conserving registers\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Registers are limited, so computations should conserve registers, lest the computation require more registers than exist. If a value in a register is not read later, the register can be reused by writing another value.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.51.33 PM.png \width19560 \height7380
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.10.2: Conserving registers.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.51.54 PM.png \width19540 \height17820
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.10.1: Conserving registers.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 9.58.56 PM.png \width14480 \height16640
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 10.00.47 PM.png \width14520 \height22640
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 10.03.15 PM.png \width14580 \height18500
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 10.10.49 PM.png \width14640 \height22440
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 10.11.59 PM.png \width14720 \height18220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.11 Memory alignment and endianness\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Memory alignment\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A particular memory may store a sequence of 32-bit wide words (instructions or data). One might assume addresses for each word would increment by 1, as in: 0, 1, 2, 3, 4, 5, etc. However, each byte in a word can be addressed individually. Thus, addresses of each word increment by 4: 0, 4, 8, 12, 16, etc. 
\i\b Memory alignment
\i0\b0  is the restriction of word addresses to multiples of 4 (or other multiples for different processors).\
Instructions that load or store words must use addresses that are multiples of four. Instructions that load or store bytes may use any address.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.11.1: Memory alignment: Because each byte is addressable, word addresses are multiples of 4.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 10.24.23 PM.png \width19440 \height7800
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.11.2: Memory alignment.\cb1 \
Consider the above animation on memory alignment.\
1)\
How many bytes exist per word?\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 4
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 4\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 Each word is 32 bits. A byte is 8 bits. Thus 32 / 8 = 4 bytes exist per word.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
How many byte addresses exist for one word?\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 4
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 4\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 Each word has 4 bytes, and each byte needs an address. Thus, 4 addresses exist per word.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
What are the byte addresses for the bytes in the word starting at address 12? Type as: 0, 1, 2, 3\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 12, 13, 14, 15
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 12, 13, 14, 15\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 That word's first byte has address 12, the second byte 13, the third 14, and the fourth 15.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
Is storing a byte into address 15 allowed? Type yes or no.\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 yes
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 yes\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 Each byte in memory has an address, so no memory alignment restrictions exist for byte addresses.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 5)\
Is storing a word into address 15 allowed? Type yes or no.\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 no
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 no\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 Word addresses must be multiples of 4, but 15 is not a multiple of 4. Words exist at address 12 and at 16. \
Storing a word, which is 4 bytes, into 15 would require putting one byte into word 12's last byte, and the other three bytes into word 16's first three bytes. Such a mess is not supported.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 6)\
A programmer wishes to load the last word of the memory shown in the animation. What address should be used in the load word instruction?\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 20
\b\fs32 \cf1 \
\cb8 Check\cb1 \

\fs28 \cf6 Show answer\
\pard\pardeftab720\partightenfactor0
\cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \cb9 20\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 The last word's address is 20. Loading word 20 will thus load the four bytes of that word. Note that word 20's 4 bytes have addresses 20, 21, 22, and 23, but those addresses are only relevant when loading a particular byte, not when loading an entire word.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 10.26.39 PM.png \width19500 \height21240
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Endianness\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 Endianness
\i0\b0  refers to whether bytes in a word are ordered starting with the most-significant byte first (
\i\b big-endian
\i0\b0 ) or the least-significant byte first (
\i\b little-endian
\i0\b0 ). Some processors use big-endian format, others use little-endian.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 10.31.28 PM.png \width14440 \height7480
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
Endianness only impacts the ordering of bytes; the bits within the byte remain in the same order. Ex: 00001111 remains 00001111 for either big or little endian formats, and does not become 11110000.\
Programmers usually need not be concerned with endianness, unless doing byte-level operations within a word (which is rare).
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 \expnd0\expndtw0\kerning0
N\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.11.4: Big-endian.\cb1 \
The binary number 00000000 00001111 11111111 11000000 (1048512 in decimal) is to be stored in word 20 in big-endian format. Indicate the byte address of each byte.\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 10.32.31 PM.png \width19240 \height10680
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.11.6: Endianness.\cb1 \
\
1)\
Little-endian processors are faster than big-endian.\
False\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Endianness does not significantly impact performance. Some processors happen to use one format, some use the other.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
Programmers spend much time and effort focusing on endianness.\
False\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Endianness is usually hidden from the programmer. However, knowledge of endianness is relevant when designing a processor and when learning how processors work. Endianness also matters for the (rare) cases when a programmer is doing byte-level operations on data.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
In little-endian format, 10000000 would become 00000001.\
False\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The bits within a byte don't change order. Only the bytes themselves are stored in different order.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 5.12 Arrays and strings\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Arrays\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In C, an 
\i\b array
\i0\b0  is a variable consisting of a sequence of 
\i\b elements
\i0\b0 . Ex: int x[4] defines 4 elements, accessed as x[0], x[1], x[2], and x[3]. An array's elements are stored sequentially in memory, with a starting address known as the 
\i\b base address
\i0\b0  (or just base). So if x's base is 5000, then x[0] is at 5000, x[1] 5004, x[2] 5008, and x[3] 5012 (recalling word addresses increment by 4).\
In assembly, accessing element x[i] requires calculating the element's address as: base + 4*i. Ex: If x's base is 5000, then x[2]'s address is 5000 + 4*2 = 5008.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.12.1: Declaring an array, and calculating an element's address.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 11.29.59 PM.png \width19360 \height7560
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.12.2: Arrays in assembly.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 11.31.50 PM.png \width19540 \height24900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Arrays and loops\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 One benefit of an array versus one variable per element is efficient handling in loops, as shown below.\
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.12.1: Array example in C.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Assume int x[51] and int i.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 i \cf13 =\cf2  \cf14 0\cf15 ;\cf2           \
\pard\pardeftab720\partightenfactor0

\f4\b \cf16 while
\f3\b0 \cf2  \cf13 (\cf2 i \cf13 <=\cf2  \cf14 50\cf13 )\cf2  \cf15 \{\cf2  \
   x\cf13 [\cf2 i\cf13 ]\cf2  \cf13 =\cf2  i \cf13 *\cf2  i\cf15 ;\cf2 \
   i \cf13 =\cf2  i \cf13 +\cf2  \cf14 1\cf15 ;\cf2     \
\pard\pardeftab720\partightenfactor0
\cf15 \}\cf2 \
\pard\pardeftab720\partightenfactor0
\cf17 // x will be 0, 1, 4, 9, ..., 2500
\f0\fs32 \cf2 \
\
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.12.2: Above array example in assembly.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Assume: $t0 has x's base of 5000, $t1 has 50, and $t2 has 4.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth776\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6969\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3\fs24 \cf2 Line\
1\
2\
3\
4\
5\
6\
7\
8\
9\
10\
11\cf0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 #\
    addi $t3, $zero, 0  # i = 0;\
While:\
    bgt $t3, $t1, After  # while (i <= 50)\
    mul $t4, $t3, $t2   # $t4 = i * 4\
    add $t4, $t0, $t4   # $t4 = x's base + i*4 \
    mul $t5, $t3, $t3   # $t5 = i * i\
    sw $t5, 0($t4)      # x[i] = i * i;\
    addi $t3, $t3, 1    # i = i + 1;\
    j While\
\
After:\cf0 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.12.3: Arrays and loops.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-26 at 11.33.48 PM.png \width19740 \height18860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.12.1: Arrays in assembly.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 11.40.54 PM.png \width19440 \height17900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-26 at 11.42.44 PM.png \width19620 \height14000
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 8.45.07 PM.png \width16180 \height22480
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 8.48.24 PM.png \width18540 \height22160
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
y[3]=10\
addi, 12\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 8.54.27 PM.png \width19340 \height17500
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 8.57.42 PM.png \width14920 \height25840
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 9.01.28 PM.png \width19460 \height21700
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.48.53 PM.png \width19580 \height24400
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.47.10 PM.png \width16820 \height24660
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.48.53 PM.png \width19580 \height24400
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \\\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.55.20 PM.png \width16480 \height24020
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.54.03 PM.png \width17480 \height24200
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.56.31 PM.png \width19640 \height18760
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Strings\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In C, a 
\i\b string
\i0\b0  is an array of characters. Each character is stored as a number, being the character's ASCII value. The last element in a C string is always the 
\i\b null character
\i0\b0  '\\0', whose ASCII value is 0.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 11.27.21 AM.png \width14600 \height7080
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
A programmer can leave the array size blank, as in 
\f3 char myStr[] = "Hi";
\f0 . The compiler will create an array with the appropriate number of elements, in this case 3, with the last element being the null character.\
A character is 8 bits (one byte), while a memory word is 32 bits. Thus, in MIPS, a character array is stored with four characters per word, with each successive element having an address incremented by 1 (not 4). MIPS has instructions lb (load byte) and sb (store byte) to access bytes within a word. However, for simplicity of introduction, MIPSzy only has lw (load word) and sw (store word), and thus packing four characters per word is not discussed here.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.12.5: C strings.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 11.29.43 AM.png \width19700 \height18440
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.13 beq, bne, j: Branch and jump instructions\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Branch instructions: beq, bne\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b branch
\i0\b0  instruction specifies the location of the next instruction to execute, depending on the branch instruction's condition. A 
\i\b branch on equal
\i0\b0  (
\i\b beq
\i0\b0 ) instruction branches to an instruction at a specified location if the values held in two registers are equal. If the values are equal, the branch is taken, and the instruction at the specified location is executed. Otherwise, the branch is not taken, and the instruction immediately following the branch instruction is executed.\
A branch instruction typically uses a label to specify the next instruction's location. A 
\i\b label
\i0\b0  is a named position in a program that represents an instruction's memory address. The MIPS beq instruction format below branches to the instruction at location Label if the the values held in regA and regB are equal.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 beq regA, regB, Label\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 A label is a sequence of letters (a-z, A-Z, _) and digits (0-9) starting with a letter and followed by a colon (:).
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 1.04.45 PM.png \width14500 \height6740
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 1.05.05 PM.png \width14420 \height6720
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 1.05.29 PM.png \width14480 \height6700
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 1.15.40 PM.png \width19580 \height13120
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.13.3: Labels.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 1.16.45 PM.png \width19560 \height19060
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
A 
\i\b branch on not equal
\i0\b0  (
\i\b bne
\i0\b0 ) instruction branches to an instruction at a specified location if the values held in two registers are not equal. The MIPS bne instruction format below branches to the instruction at Label if the values held in regA and regB are not equal.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 bne regA, regB, Label\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.13.4: Branch instructions: bne and beq.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 1.18.38 PM.png \width19560 \height25820
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Jump instruction\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b jump
\i0\b0  (
\i\b j
\i0\b0 ) instruction specifies the location of the next execution to execute. A jump instruction is also know as an unconditional branch. The MIPS j instruction format below jumps to the instruction at Label.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 j Label\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.13.5: Jump (j) instruction.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 1.19.51 PM.png \width10200 \height6060
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.13.6: Jump instructions.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 1.20.31 PM.png \width19440 \height9480
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
Branch and jump instructions are commonly used together to direct a program to conditionally execute either one group of instructions or another group, but not both. A branch instruction is used to decide which group of statements to execute. If the branch is taken, the instruction group at the label specified in the branch is executed. If the branch is not taken, the instruction group after the branch is executed. That instruction group ends with a jump instruction to the first instruction after the other instruction group, so the other instruction group is not executed.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.14.48 PM.png \width14560 \height8620
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.15.08 PM.png \width14460 \height9120
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.15.31 PM.png \width14520 \height8860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.15.50 PM.png \width14580 \height8980
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.13.8: Branch and jumps instructions.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.17.50 PM.png \width19660 \height16120
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.18.57 PM.png \width19220 \height12040
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 \expnd0\expndtw0\kerning0
Table 5.13.1: Instruction summary: beq, bne, j.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth1503\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx2160
\clvertalc \clcbpat10 \clwWidth3576\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clcbpat10 \clwWidth7210\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx6480
\clvertalc \clcbpat10 \clwWidth5689\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 Instruction\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Format\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Description\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Example\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3456\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7090\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth5569\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 beq\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 beq $a, $b, BLabel
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Branch on equal: Branches to the instruction at BLabel if the values held in $a and $b are equal. Otherwise, instruction immediately after beq is executed.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 beq $t3, $t2, SumEq5
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3456\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7090\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth5569\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 bne\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 bne $a, $b, BLabel
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Branch on not equal: Branches to the instruction at BLabel if the values held in $a and $b are not equal. Otherwise, instruction immediately after bne is executed.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 bne $t4, $t5, GuessNeqCorrect
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3456\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7090\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth5569\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 j\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 j JLabel
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Jump: Causes execution to continue with the instruction at JLabel.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 j CalcTip\cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.21.31 PM.png \width14400 \height14520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.23.05 PM.png \width14600 \height10860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.23.55 PM.png \width14340 \height14220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.25.05 PM.png \width14500 \height14480
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.30.39 PM.png \width14540 \height10280
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.32.02 PM.png \width14660 \height16580
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.33.33 PM.png \width14620 \height12380
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.46.55 PM.png \width14600 \height18800
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.50.15 PM.png \width14560 \height18600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.52.22 PM.png \width14460 \height14100
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 2.59.56 PM.png \width14400 \height21180
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 3.03.00 PM.png \width15040 \height15120
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.14 slt: Set on less than instruction\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb12 Instructor note:\cb1 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0
\cf2 \cb12 Once again, please do note that BLT, BLE, BGT and BGE are pseudoinstructions and not real MIPS; therefore you will not be allowed to use them on exams (though Mars does accept them). Table 5.14.1 provides a good example of their equivalent translations using MIPS instructions, if you need it to help you study.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Set on less than instruction\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 The 
\i\b set on less than
\i0\b0  (
\i\b slt
\i0\b0 ) instruction sets a register to 1 if the value held in the register is less than the value held in another register , otherwise the register is set to 0. Ex: 
\f3 slt $t1, $t4, $t5
\f0  sets $t1 to 1 if $t4's value is less than $t5's value, otherwise $t1 is set to 0. The slt instruction is typically used with the beq or bne instructions to branch to an instruction based on the relational comparisons to two registers.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.14.1: Set on less than instruction.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 3.34.32 PM.png \width14420 \height6460
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 3.35.04 PM.png \width14420 \height6400
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.14.2: Set on less than.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 3.44.23 PM.png \width19700 \height19380
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Branch pseudoinstructions: blt, ble, bgt, bge\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Common comparisons used for branch instructions include less than (<), less than or equal (\uc0\u8804 ), greater than (>), and greater than or equal (\u8805 ). However, MIPS natively supports only two branch instructions: beq (branch on equal) and bne (branch on not equal). An slt followed by either a beq or bne can implement any comparison <, \u8804 , >, \u8805 . However, the slt + beq/bne approach is non-intuitive to many programmers. Thus, MIPS supports the following pseudoinstructions.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls22\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
A 
\i\b branch on less than
\i0\b0  (
\i\b blt
\i0\b0 ) instruction branches if the first register is less than the second.\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
A 
\i\b branch on less than or equal
\i0\b0  (
\i\b ble
\i0\b0 ) instruction branches if the first register is less than or equal to the second.\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
A 
\i\b branch on greater than
\i0\b0  (
\i\b bgt
\i0\b0 ) instruction branches if the first register is greater than the second.\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
A 
\i\b branch on greater than or equal
\i0\b0  (
\i\b bge
\i0\b0 ) instruction branches if the first register is greater than or equal to the second.\
\pard\pardeftab720\partightenfactor0
\cf2 A MIPS assembler will convert each pseudoinstruction into the indicated two native instructions. The assembler uses a temporary register to store the result of an slt instruction, which is used in the following beq or bne instruction. The 
\i\b $at
\i0\b0  (or 
\i\b assembler temporary
\i0\b0 ) register is reserved for use by the assembler to hold temporary values needed to implement pseudoinstructions.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Table 5.14.1: Branch pseudoinstructions and equivalent native instructions.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth3960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clcbpat10 \clwWidth4344\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 Branch pseudoinstruction\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Native instructions\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth3840\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4224\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 blt $t0, $t1, BLabel
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 slt $at, $t0, $t1\
bne $at, $zero, BLabel\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth3840\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4224\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 ble $t0, $t1, BLabel
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 slt $at, $t1, $t0\
beq $at, $zero, BLabel\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth3840\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4224\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 bgt $t0, $t1, BLabel
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 slt $at, $t1, $t0\
bne $at, $zero, BLabel\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth3840\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4224\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 bge $t0, $t1, BLabel
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 slt $at, $t0, $t1\
beq $at, $zero, BLabel\cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.14.3: Branch pseudoinstructions.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 3.45.41 PM.png \width19680 \height17500
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 \expnd0\expndtw0\kerning0
Table 5.14.2: Instruction summary: slt.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth1503\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx2160
\clvertalc \clcbpat10 \clwWidth2808\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clcbpat10 \clwWidth10283\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx6480
\clvertalc \clcbpat10 \clwWidth3384\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 Instruction\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Format\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Description\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Example\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2688\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth10163\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3264\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 slt\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 slt $a, $b, $c
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Set on less than: Write 1 to register $a if value held in register $b is less than value held in register $c, and otherwise writes 0.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 slt $t1, $t5, $t6
\f0 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.01.24 PM.png \width14480 \height19940
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.02.42 PM.png \width14460 \height15400
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.04.14 PM.png \width14480 \height19420
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.06.07 PM.png \width14140 \height19600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.14.32 PM.png \width14520 \height15660
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.16.44 PM.png \width14740 \height18860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.18.41 PM.png \width14880 \height15220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.15 If-else\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 If statement\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In C, an 
\i\b if
\i0\b0  statement executes substatements when the statement's expression is true, otherwise the substatements are skipped. If the expression is a comparison for equality, an if statement can be converted to a simple pattern of assembly instructions starting with a bne (branch on not equal) instruction.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.50.33 PM.png \width14600 \height6180
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.15.2: If statement in assembly.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.51.28 PM.png \width19260 \height21300
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
If-else statement\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In C, an 
\i\b if-else
\i0\b0  statement executes one of two possible sets of substatements depending on an expression's value. When the expression is a comparison for equality, an if-else statement can be converted to a simple pattern in assembly, starting with a bne instruction.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.53.23 PM.png \width14480 \height7260
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.15.4: If-else statement in assembly.\cb1 \
The first few questions list assembly instructions intended to implement the if-else statement, in sequence. Indicate whether the instructions are correct. Assume x and y values are in $t0 and $t1, and w's value should be in $t3.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.54.05 PM.png \width19380 \height18100
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
If-else-if\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 C programs commonly use a multi-branch form of an if-else statement. The assembly language pattern is similar to above, but requiring more labels. Each part's check has a branch (bne) to the subsequent part. Each part (except the last) ends with a jump to After.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.15.1: If-else-if in assembly.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalt \clshdrawnil \clwWidth4088\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth6249\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b\fs24 \cf16 if
\f3\b0 \cf2  \cf13 (\cf2 x \cf13 ==\cf2  y\cf13 )\cf2  \cf15 \{\cf2 \
   w \cf13 =\cf2  w \cf13 +\cf2  \cf14 50\cf15 ;\cf2 \
\cf15 \}\cf2 \

\f4\b \cf16 else
\f3\b0 \cf2  
\f4\b \cf16 if
\f3\b0 \cf2  \cf13 (\cf2 x \cf13 ==\cf2  z\cf13 )\cf2  \cf15 \{\cf2  \cf17 // Else1\cf2 \
   w \cf13 =\cf2  w \cf13 +\cf2  \cf14 60\cf15 ;\cf2 \
\cf15 \}\cf2 \

\f4\b \cf16 else
\f3\b0 \cf2  \cf15 \{\cf2              \cf17 // Else2\cf2 \
   w \cf13 =\cf2  w \cf13 +\cf2  \cf14 70\cf15 ;\cf2  \
\cf15 \}\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 #\
        bne $t0, $t1, Else1  # (x == y)\
        addi $t3, $t3, 50    # w = w + 50;\
        j After\
\
Else1:  bne $t0, $t2, Else2  # (x == z)\
        addi $t3, $t3, 60    # w = w + 60;\
        j After\
\
Else2:  addi $t3, $t3, 70    # w = w + 70;\
\
After:\cf0 \cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.55.28 PM.png \width19600 \height9400
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 4.56.03 PM.png \width19500 \height16120
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 5.06.06 PM.png \width14740 \height19400
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 5.11.04 PM.png \width14720 \height19440
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 5.14.06 PM.png \width14720 \height15480
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 5.22.36 PM.png \width14480 \height23360
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 5.41.15 PM.png \width14360 \height18480
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 5.43.24 PM.png \width14360 \height23640
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 5.48.20 PM.png \width14700 \height23600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 5.51.19 PM.png \width14440 \height18520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 5.54.56 PM.png \width14740 \height23640
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 6.05.04 PM.png \width12220 \height23780
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 6.10.49 PM.png \width14640 \height23360
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.16 If-else expressions\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Comparing variables for equal or not equal\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 An earlier section showed that x == y should use a bne instruction in assembly. Conversely, an x != y should use a beq instruction. In the assembly below, when x does not equal y, execution falls through beq to the If substatement, as desired. When x equals y, beq branches to After, skipping the If substatement.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.16.1: != uses beq.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalt \clshdrawnil \clwWidth2216\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth6537\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b\fs24 \cf16 if
\f3\b0 \cf2  \cf13 (\cf2 x \cf13 !=\cf2  y\cf13 )\cf2  \cf15 \{\cf2 \
   w \cf13 =\cf2  w \cf13 +\cf2  \cf14 50\cf15 ;\cf2 \
\cf15 \}\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 # \
      beq $t0, $t1, After\
      addi $t3, $t3, 50 # If substatement   \
After:\cf0 \cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 6.35.10 PM.png \width19860 \height16820
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Other comparisons\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Common if expressions are not just equal or not equal, but also <, \uc0\u8804 , >, and \u8805 . MIPS pseudoinstructions exist for the latter four (discussed later in this section).\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Table 5.16.1: MIPS branch instructions for various comparisons.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth5188\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx2880
\clvertalc \clcbpat10 \clwWidth3000\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx5760
\clvertalc \clcbpat10 \clwWidth4569\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 MIPS instruction\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Example\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Meaning\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth5068\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4449\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\i\b \cf2 beq
\i0\b0 : Branch on equal\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 beq $t0, $t1, L
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Branch if $t0 equals $t1\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth5068\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4449\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\i\b \cf2 bne
\i0\b0 : Branch on not equal\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 bne $t0, $t1, L
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Branch if $t0 does not equal $t1\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth5068\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4449\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\i\b \cf2 blt
\i0\b0 : Branch on less than\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 blt $t0, $t1, L
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Branch if $t0 < $t1\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth5068\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4449\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\i\b \cf2 ble
\i0\b0 : Branch on less than or equal\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 ble $t0, $t1, L
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Branch if $t0 \uc0\u8804  $t1\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth5068\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4449\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\i\b \cf2 bgt
\i0\b0 : Branch on greater than\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 bgt $t0, $t1, L
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Branch if $t0 > $t1\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth5068\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4449\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\i\b \cf2 bge
\i0\b0 : Branch on greater than or equal\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 bge $t0, $t1, L
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Branch if $t0 \uc0\u8805  $t1\cell \lastrow\row
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 (Above, L means Label, and, "$t0 equals $t1" actually means "$t0's value equals $t1's value")
\fs32 \
\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 Feedback?\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 An earlier section showed that an efficient pattern in assembly for if statements involving == or != uses the opposite comparison in assembly: == uses bne, != uses beq. Similarly, opposites should be used for the other comparisons.\
An earlier section showed that an efficient pattern in assembly for if statements involving == or != uses the opposite comparison in assembly: == uses bne, != uses beq. Similarly, opposites should be used for the other comparisons.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Table 5.16.2: Comparison opposites.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth1715\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clcbpat10 \clwWidth3003\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 Comparison\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Opposite comparison\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1595\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth2883\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 equal\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 not equal\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1595\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth2883\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 not equal\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 equal\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1595\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth2883\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 <\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 \uc0\u8805 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1595\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth2883\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 \uc0\u8804 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 >\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1595\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth2883\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 >\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 \uc0\u8804 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1595\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth2883\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 \uc0\u8805 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 <\cell \lastrow\row
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 Feedback?\
\pard\pardeftab720\partightenfactor0

\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.16.2: Various comparisons.\cb1 \
For each question's C expression that completes the given C, choose the correct assembly instruction to complete the assembly. \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-27 at 6.39.46 PM.png \width19800 \height18300
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Comparing with an expression rather than a variable\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Earlier examples have compared with variables, like x == y. Sometimes an if statement in C compares with an expression, like (x - y) == z. To implement in assembly, one can first compute the expression and write the result to a register, and then compare with that register.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.16.2: Comparing with an expression is done by first writing the expression's result to a register.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalt \clshdrawnil \clwWidth2936\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth7545\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b\fs24 \cf16 if
\f3\b0 \cf2  \cf13 ((\cf2 x \cf13 -\cf2  y\cf13 )\cf2  \cf13 ==\cf2  z\cf13 )\cf2  \cf15 \{\cf2 \
   w \cf13 =\cf2  w \cf13 +\cf2  \cf14 50\cf15 ;\cf2 \
\cf15 \}\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 # \
      sub $t5, $t0, $t1  # $t5 = x - y\
      bne $t5, $t2, After # Compares (x - y) with z\
      addi $t3, $t3, 50  # If substatement   \
After:\cf0 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 Feedback?\
\pard\pardeftab720\partightenfactor0

\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.16.3: Comparing with expressions.\cb1 \
Implement the C by completing the assembly. Assume $t0 has x's value, $t1 has y's, $t2 has z's.\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 6.42.33 PM.png \width19520 \height23180
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 6.43.00 PM.png \width19380 \height12180
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 6.43.37 PM.png \width14540 \height14200
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 7.25.29 PM.png \width14520 \height14100
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 7.26.42 PM.png \width14440 \height15160
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 7.29.23 PM.png \width14540 \height21780
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 7.32.17 PM.png \width14760 \height17980
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 7.37.11 PM.png \width14940 \height23020
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 7.44.42 PM.png \width14800 \height18540
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.17 Loops\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 While loops\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In C, a 
\i\b while loop
\i0\b0  has an expression and substatements. If the expression is true, the substatements execute, and then execution jumps back to check the expression again. Each execution of a loop's substatements is called an 
\i\b iteration
\i0\b0 .\
A while loop can be converted to assembly using a pattern similar to an if statement's pattern, but with a jump back after the substatements.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 9.23.49 PM.png \width14540 \height6480
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 \expnd0\expndtw0\kerning0
PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.17.2: While loop in assembly.\cb1 \
Implement the C by completing the assembly. Assume $t0 has x's value, $t1 has y's value, and $t2 has 2.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl4909 \trmarr4909 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalt \clshdrawnil \clwWidth2936\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth4665\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b\fs24 \cf16 while
\f3\b0 \cf2  \cf13 (\cf2 x \cf13 <=\cf2  y\cf13 )\cf2  \cf15 \{\cf2    \
   x \cf13 =\cf2  x \cf13 *\cf2  \cf14 2\cf15 ;\cf2 \
\cf15 \}\cf2 \
\
y \cf13 =\cf2  y \cf13 +\cf2  \cf14 3\cf15 ;\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 While:  (a) ___ $t0, $t1, After\
        (b) ___ $t0, $t0, $t2\
        (c) _____\
\
(d)___: addi $t1, $t1, 3\cf0 \cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-27 at 9.25.08 PM.png \width19580 \height16380
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
For loops\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In C, a 
\i\b for loop
\i0\b0  has four parts: substatements, and three preceding parts of an initialization, an expression, and an update. A for loop is merely a convenient representation of a common form of while loop. Thus, to implement in assembly, one can convert the for loop to a while loop, and then implement the while loop as above.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.17.1: For loop first converted to while loop, then to assembly.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalt \clshdrawnil \clwWidth5385\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth4233\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx5760
\clvertalt \clshdrawnil \clwWidth6537\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3\fs24 \cf17 // for (Init; Expr; Update) \cf2 \
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b \cf16 for
\f3\b0 \cf2  \cf13 (\cf2 i \cf13 =\cf2  \cf14 0\cf15 ;\cf2   i \cf13 <\cf2  y\cf15 ;\cf2   i \cf13 =\cf2  i \cf13 +\cf2  \cf14 1\cf13 )\cf2  \cf15 \{\cf2    \
   w \cf13 =\cf2  w \cf13 +\cf2  \cf14 50\cf15 ;\cf2  \cf17 // Substmts\cf2 \
\cf15 \}\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 i \cf13 =\cf2  \cf14 0\cf15 ;\cf2            \cf17 // Init\cf2 \
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b \cf16 while
\f3\b0 \cf2  \cf13 (\cf2 i \cf13 <\cf2  y\cf13 )\cf2  \cf15 \{\cf2   \cf17 // Expr\cf2 \
   w \cf13 =\cf2  w \cf13 +\cf2  \cf14 50\cf15 ;\cf2    \cf17 // Substmts\cf2 \
   i \cf13 =\cf2  i \cf13 +\cf2  \cf14 1\cf15 ;\cf2     \cf17 // Update\cf2 \
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf15 \}\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 addi $t0, $zero, 0  # i = 0\
While: bge  $t0, $t1, After # while (i < y) \
       addi $t3, $t3, 50   #    w = w + 50\
       addi $t0, $t0, 1    #    i = i + 1\
       j While\
After:\cf0 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \
In the assembly above, assume $t0 is i, $t1 is y, and $t3 is w.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-27 at 9.26.46 PM.png \width19620 \height12500
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 9.28.40 PM.png \width14420 \height23600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 9.33.16 PM.png \width14600 \height18540
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 9.37.25 PM.png \width14440 \height23140
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 9.38.47 PM.png \width14600 \height18440
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 10.05.23 PM.png \width14560 \height19160
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 10.06.32 PM.png \width14620 \height24220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 10.10.29 PM.png \width14560 \height18940
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.18 jal, jr: Subroutine instructions\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb12 \expnd0\expndtw0\kerning0
Instructor note:\cb1 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0
\cf2 \cb12 Sections 5.18-5.21 provide a good conceptual description of how MIPS subroutines work, using temporary registers ($t) for the stack and parameters. However, practically speaking their translation is not accurate because temporary registers by definition are NOT saved across procedure calls, and MIPS provides $a registers for parameters.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Subroutines\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A program often needs to perform the same operation for different data values. Ex: Determining the maximum of two values, converting a temperature from Fahrenheit to Celsius, etc. Instead of duplicating the instruction sequence for an operation multiple times, a programmer can use a subroutine. A 
\i\b subroutine
\i0\b0  is a sequence of instructions that performs a specific operation that can be called from anywhere within a program. A subroutine call causes the subroutine's statements to execute.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.18.1: Subroutine for computing maximum of two values.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 10.16.49 PM.png \width19580 \height12800
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 10.17.33 PM.png \width19440 \height12140
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
Refer to the animation above.\
1)\
What label indicates the first instruction of the subroutine for computing the maximum value?\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 CompMax\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The CompMax label indicates the first instruction of the subroutine. A jump and link instruction, discussed below, is used to jump to the subroutine.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
How many redundant instructions in the original code were moved to the subroutine.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 5\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The redundant 5 instructions for computing the maximum of $t0 and $t1 were used to create the CompMax subroutine.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
A subroutine's instructions must be duplicated each time the subroutine is called.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 False\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 A subroutine can be called without duplicating the subroutine's instructions.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 4)\
A subroutine may have up to 1024 instructions.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 False\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 No limit on the number of instructions within a subroutines exists.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Jump and link and jump register instructions\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 The 
\i\b jump and link
\i0\b0  (
\i\b jal
\i0\b0 ) instruction stores the address of the next instruction in register $ra, and then jumps to the instruction at the specified location. Ex: 
\f3 jal CalcCube
\f0  stores the address of the instruction after the jal instruction in $ra, and continues execution with the instruction at CalcCube; CalcCube is the label for the first instruction of the subroutine. The 
\i\b $ra
\i0\b0  register (or 
\i\b return address register
\i0\b0 ) stores the instruction address to which a subroutine returns after executing. The 
\i\b jump register
\i0\b0  (
\i\b jr
\i0\b0 ) instruction jumps to the instruction at the address held in a register. Ex: 
\f3 jr $ra
\f0  jumps to the instruction at the address held in register $ra. A programmer uses jal to call a subroutine, and jr to return from a subroutine.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.18.3: Subroutine call using jal and jr instructions.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 10.19.18 PM.png \width14300 \height8620
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 10.20.17 PM.png \width19340 \height15040
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Arguments and return values\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 An 
\i\b argument
\i0\b0  is a value passed to a subroutine, that influences the subroutine's operations. A 
\i\b return value
\i0\b0  is a value returned from a subroutine. A simple subroutine may use specific registers for the argument and return value. Ex: The CalcCube subroutine above uses $t0 for the subroutine's argument and $t1 for the return value.\
The assembly program below passes arguments to the CalcCube subroutine using $t0. The CalcCube subroutine returns the result using $t1. The program first passes 3 to the subroutine by writing 3 to register $t0. After executing the subroutine, $t1 holds the value 9, which is stored in data memory at address 5000. The program then passes 17 to the subroutine by writing 17 to $t0. The result of 4913 is then stored to data memory at address 5004.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.18.1: Passing arguments to multiple CalcCube subroutine calls.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 \cb11 # Initialize registers for DM addresses\
addi $t5, $zero, 5000  \
addi $t6, $zero, 5004  \
\
# Compute cube of 3\
addi $t0, $zero, 3  # Pass argument of 3   \
jal CalcCube        # Call CalcCube\
sw $t1, 0($t5)      # Store result to DM[5000]\
\
# Compute cube of 17\
addi $t0, $zero, 17  # Pass argument of 17   \
jal CalcCube         # Call CalcCube\
sw $t1, 0($t6)       # Store result to DM[5004]\
j Done\
\
# CalcCube subroutine. \
#    $t0 is subroutine argument\
#    $t1 is subroutine return value\
CalcCube:\
   mul $t1, $t0, $t0\
   mul $t1, $t1, $t0\
   jr $ra            # Return from subroutine\
   \
Done:\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 Feedback?
\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 10.21.12 PM.png \width19360 \height14440
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 10.21.59 PM.png \width19640 \height12620
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 \expnd0\expndtw0\kerning0
Table 5.18.1: Instruction summary: jal, jr.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth1503\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx2160
\clvertalc \clcbpat10 \clwWidth2040\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clcbpat10 \clwWidth12203\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx6480
\clvertalc \clcbpat10 \clwWidth2232\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 Instruction\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Format\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Description\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Example\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth1920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth12083\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2112\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 jal\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 jal JLabel
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Jump and link: Stores the address of the next instruction in register $ra, and continues execution with the instruction at JLabel.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 jal CalcTip
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth1383\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth1920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth12083\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2112\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 jr\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 jr $a
\f0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Jump register: Causes execution to continue with the instruction at address $a.\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf2 jr $t3
\f0 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\partightenfactor0

\f5\fs30 \cf18 \expnd0\expndtw0\kerning0
Reset
\fs32 \cf2 \
Pass DM[$t4] to the YearlySalary subroutine, and store the return value to DM[$t5].\
\
$t2 is the subroutine argument.\
\
$t3 is the subroutine return value.
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 10.23.38 PM.png \width14420 \height5340
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 11.29.58 PM.png \width19300 \height21860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 11.32.17 PM.png \width13960 \height23720
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-27 at 11.43.10 PM.png \width19120 \height19540
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.19 Assembly program example: Subroutines\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Assembly program\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Subroutines enable programmers to write modular assembly programs. A subroutine has well-defined input and output, so a programmer can focus on developing a particular subroutine (or module) independently of other subroutines. Each subroutine should have easily-recognizable behavior, and the main behavior of the program should be easily understandable via a sequence of subroutine calls.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.19.1: Modular program development with subroutine: Calculating employee pay.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 8.22.02 PM.png \width14620 \height10000
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 \expnd0\expndtw0\kerning0
PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.19.2: Modular program development.\cb1 \
Refer to the animation above.\
1)\
Modular development means to divide a program into separate modules (or subroutines) that can be developed and tested separately.\
True\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Modular development yield programs that are easier to develop, read, and maintain. Using modular development, a programmer can write and test each subroutine and the main program behavior separately.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 2)\
The main program behavior only consists of jal instructions to call subroutines.\
False\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 The main program behavior also requires instructions to load and store data, write arguments to registers before calling the subroutines, etc.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 3)\
The CalcPay subroutine can be written before the CalcOvertimeHours subroutine.\
True\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf7 Correct\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Even though the CalcPay subroutine needs the overtime hours, the subroutine's behavior is well defined and can be written and tested before the CalcOvertimeHours subroutine.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 8.32.55 PM.png \width19860 \height11320
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Modular subroutine development\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 The subroutines for calculating the number of overtime hours and calculating the employee's pay can be developed separately.\
Overtime is the number of hours worked beyond 40 hours in a single week. Ex: If an employee works 55 hours, the employee worked 15 hours of overtime. If an employee works 40 hours or fewer , then the employee worked zero overtime hours. The CalcOvertimeHours subroutine below calculates the number of overtime hours an employee has worked given the number of total hours the employee worked in a week. $t0 is used for the subroutine's argument, which is the number of hours worked in a week. $t1 is used for the subroutine's return value, which is the number of overtime hours.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.19.1: CalcOvertimeHours subroutine calculates an employee's overtime hours.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 \cb11 CalcOvertimeHours:\
   addi $t2, $zero, 40\
   slt $t3, $t0, $t2\
   bne $t3, $zero, NoOvertime\
   # Overtime worked\
   # Overtime hours is 40 - hours worked\
   sub $t1, $t0, $t2 \
   j ReturnOvertime\
NoOvertime:\
   # No overtime, so overtime hours is 0\
   addi $t1, $zero, 0\
ReturnOvertime:\
   jr $ra\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 Feedback?\
\pard\pardeftab720\partightenfactor0

\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.19.3: CalcOvertimeHours.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 8.34.13 PM.png \width19500 \height10300
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
An employee is paid an hourly wage for the first 40 hours, and two times the hourly wage for overtime hours. The CalcPay subroutine below calculates an employee's weekly pay. An employee's hourly pay rate is $10/hour. The subroutine's uses $t0 for the total hours worked, $t1 for the employee hourly wage, and $t2 for the number of overtime hours. The subroutine returns the employee's pay using $t3.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.19.2: CalcPay subroutine calculates an employee's pay.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 \cb11 CalcPay:\
   # Calculate base pay\
   mul $t3, $t0, $t1   \
   # Calculate overtime pay\
   mul $t4, $t2, $t1   \
   # Calculate total pay\
   add $t3, $t3, $t4\
   jr $ra
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 8.34.58 PM.png \width19140 \height11100
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Main program behavior is a sequence of subroutine calls.\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 The program below calculates the pay for a single employee, where DM[5000] is the total hours worked by the employee, and the total pay is stored to DM[5040]. The program's main behavior consists of loading the hours worked, calling the CalcOvertimeHours subroutine to calculate the overtime hours, calling the CalcPay subroutine to calculate the pay, and storing the pay to memory.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.19.3: Calculating pay for a single employee.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf2 \cb11 # Load hours worked from DM[5000]\
addi $t6, $zero, 5000\
lw $t0, 0($t6)         \
jal CalcOvertimeHours  \
# Overtime hours returned in $t1\
# Copy $t1 to $t2 \
add $t2, $zero, $t1   \
# Initialize pay rate to $10/hour\
addi $t1, $zero, 10     \
jal CalcPay            \
# Pay is returned in $t3\
# Store pay to DM[5040]\
addi $t6, $zero, 5040\
sw $t3, 0($t6)         \
j Done\
\
CalcOvertimeHours:\
   addi $t2, $zero, 40\
   slt $t3, $t0, $t2\
   bne $t3, $zero, NoOvertime\
   # Overtime worked\
   # Overtime hours is 40 - hours worked\
   sub $t1, $t0, $t2 \
   j ReturnOvertime\
NoOvertime:\
   # No overtime, so overtime hours is 0\
   addi $t1, $zero, 0\
ReturnOvertime:\
   jr $ra\
   \
CalcPay:\
   # Calculate base pay\
   mul $t3, $t0, $t1   \
   # Calculate overtime pay\
   mul $t4, $t2, $t1   \
   # Calculate total pay\
   add $t3, $t3, $t4\
   jr $ra\
   \
Done:
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 8.35.35 PM.png \width19480 \height9780
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.20 Subroutines and the program stack\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Stack\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 A 
\i\b stack
\i0\b0  is a data structure in which items are inserted on or removed from the top of the stack. A stack 
\i\b push
\i0\b0  operation inserts an item on the top of the stack. A stack 
\i\b pop
\i0\b0  operation removes and returns the item at the top of the stack.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-28 at 9.58.44 PM.png \width14640 \height7040
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-28 at 9.59.01 PM.png \width19740 \height21660
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-28 at 9.59.16 PM.png \width19500 \height5580
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Program stack and stack pointer\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 The 
\i\b program stack
\i0\b0  is a stack used by a program to store data for subroutines. The 
\i\b stack pointer
\i0\b0  (
\i\b $sp
\i0\b0 ) register is used to hold the address of the top of the program stack. In MIPSzy, the $sp register is automatically initialized to the last data memory location, which is at address 8188. The MIPszy program stack is limited in size to 1KB, or 256 words. The stack grows toward decreasing memory addresses. Pushing a value to the stack first decrements $sp by 4 and then copies the value held in a register to data memory at address $sp. Popping a value from the stack first copies the top of the stack to a register and then increments $sp by 4.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Stack overflow\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 A 
\b stack overflow
\b0  occurs when the number of values pushed to the stack exceeds the size allocated for the stack. Ex: Pushing 1005 values to the MIPSzy results in a stack overflow, as the stack size is limited to 1000 entries. A processor may have special circuitry to detect a stack overflow, allowing the system to execute special operation to handle the overflow, such as terminating the program.\
\pard\pardeftab720\partightenfactor0

\i0\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.20.3: Instructions for stack push and pop operations.\cb1 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.02.46 PM.png \width19480 \height7160
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.20.4: MIPS program stack.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.04.42 PM.png \width19520 \height15820
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.04.57 PM.png \width19420 \height24520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Using the program stack for subroutines\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 Because registers are limited, a subroutine call can use the program stack for arguments and return values rather than directly using registers. The values stored in the program stack for a subroutine is called a 
\i\b stack frame
\i0\b0 . A subroutine call using the program stack performs the following steps.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls23\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Push subroutine arguments to program stack\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Reserve space on program stack for the return value.\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Jump to the subroutine.\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Subroutine performs task storing return value to the reserved program stack location.\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Subroutine returns.\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
Pop return value from program stack.\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7	}\expnd0\expndtw0\kerning0
Pop arguments from program stack.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.20.5: Calling subroutine using program stack: CalcOvertimeHours.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.18.11 PM.png \width19240 \height11800
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
In the subroutine, an offset is used in lw or sw instructions to load arguments or store the return value. Ex: For a subroutine with 1 argument and 1 return value, 
\f3 0($sp)
\f0  is the address for the return value, and 
\f3 4($sp)
\f0  is the address for the argument.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.20.6: Calling subroutine using program stack.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.19.10 PM.png \width19600 \height12900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
aving return address and registers to the program stack\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 If a subroutine calls another subroutine, the value held in $ra must be saved before the second subroutine is called, because the jal for the second subroutine writes a new value to $ra. So, a subroutine that calls another subroutine will also push $ra to the program stack. Also, the value held in registers used by a subroutine may still be needed by code that called the subroutine. To avoid overwriting data, a subroutine can save the values held in any registers used by the subroutine to the program stack, and restore them before returning from the subroutine. The following shows the organization for a complete MIPSzy stack frame.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.20.1: MIPSzy stack frame.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 {{\NeXTGraphic embedded_image_1_ce3b2c5d-c46b-659c-4195-c47da771ef89_jZd0wZnUgmI4pxtyquzE.png \width8260 \height7420 \noorient
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 Feedback?\
\pard\pardeftab720\partightenfactor0

\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.20.7: Saving and restoring register using the program stack.\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.20.00 PM.png \width19520 \height19620
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.20.1: Push and pop from stack.\cb1 \
\pard\pardeftab720\partightenfactor0

\f5\fs30 \cf18 Reset
\fs32 \cf2 \
Push $t3 to the stack. Update $sp appropriately.
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f5\fs32 \cf19 \expnd0\expndtw0\kerning0
One solution is:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth3264\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl400 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth4032\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl400 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4032\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl400 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf19 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3 \cf19 addi $sp, $sp, -4\cf0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs24 \cf19 # $sp = $sp + -4 = 8184\cf0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth3264\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt160 \clpadl400 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth4032\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt160 \clpadl400 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4032\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt160 \clpadl400 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf19 sw $t3, 0($sp)\cf0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs24 \cf19 # M[$sp + 0] = M[8184] = $t3\cf0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt160 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth3264\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt160 \clpadl400 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth4032\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt160 \clpadl400 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs24 \cf0 \cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.24.46 PM.png \width14700 \height11760
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.26.37 PM.png \width14600 \height14880
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.27.48 PM.png \width14500 \height11760
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.54.45 PM.png \width14460 \height17340
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.55.41 PM.png \width14560 \height13600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.56.45 PM.png \width14580 \height13720
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.58.58 PM.png \width14500 \height21740
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 10.59.55 PM.png \width14540 \height21700
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-28 at 11.00.57 PM.png \width14660 \height16900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs64 \cf2 \expnd0\expndtw0\kerning0
5.21 Functions\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 Functions using registers only\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In C, a 
\i\b function
\i0\b0  is a named group of statements that performs a specific operation. A 
\i\b function call
\i0\b0  involves passing arguments to the function's parameters, executing the function's statements, and returning the function's return value. For a function with a few arguments, like 1 or 2, registers can be used to pass arguments to the function and return a value from the function. This material assumes $t0 is used for the first argument, $t1 for the second argument, if needed, and $t2 for the return value, if needed.\
A function definition can be converted to an assembly subroutine that assumes $t0 and $t1 hold the arguments, and writes the return value to $t2 before returning. A function call is converted to assembly following a simple pattern that assigns $t0 and $t1 with the arguments, jumps to the subroutine, and reads the return value from $t2.\
\pard\pardeftab720\partightenfactor0

\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.21.1: Functions in assembly.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.05.20 PM.png \width19580 \height9600
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 \cb1 MIPS argument and return value registers\
\pard\pardeftab720\partightenfactor0

\i\fs32 \cf2 MIPS, having more registers than MIPSzy, reserves registers $a0 to $a3 for a subroutine's arguments and $v0 and $v1 for the return value.\
\pard\pardeftab720\partightenfactor0

\i0\b\fs22 \cf2 \cb4 PARTICIPATION\cb1 \
\cb4 ACTIVITY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 5.21.2: Functions using registers.\cb1 \
Implement the C by completing the assembly. Assume $t0 is used for the first parameter, $t1 for the second parameter, and $t2 for the return value.
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
mplement the C by completing the assembly. Assume $t0 is used for the first parameter, $t1 for the second parameter, and $t2 for the return value.\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trmarl4189 \trmarr4189 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth5240\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3800\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b\fs24 \cf16 int
\f3\b0 \cf2  CalcFunc\cf13 (
\f4\b \cf16 int
\f3\b0 \cf2  aVal\cf13 ,\cf2  
\f4\b \cf16 int
\f3\b0 \cf2  bVal\cf13 )\cf2  \cf15 \{\cf2  \
   
\f4\b \cf16 return
\f3\b0 \cf2  aVal \cf13 *\cf2  \cf14 4\cf2  \cf13 +\cf2  bVal\cf15 ;\cf2 \
\cf15 \}\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 (a) _____:\
   addi $t3, $zero, 4\
   mul $t2, (b) ___, $t3\
   add (c) ___, $t2, $t1\
   CalcFuncEnd: (d) _____\cf0 \cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.06.25 PM.png \width19600 \height16280
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Functions using the stack\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 The program stack can be used to pass arguments to and return values from a function. In converting the function definition to assembly, a lw instruction is used to load a function argument, and a sw instruction is used to store to the return value. The location of the arguments and return value depends on the number of function parameters. Ex: For a function with 2 parameters and a return value, 0($sp) is the address for the return value, 4($sp) is for the second parameter, and 8($sp) for the first parameter.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.21.1: Function definition converted to assembly using program stack.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth3656\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8409\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b\fs24 \cf16 int
\f3\b0 \cf2  Max\cf13 (
\f4\b \cf16 int
\f3\b0 \cf2  x\cf13 ,\cf2  
\f4\b \cf16 int
\f3\b0 \cf2  y\cf13 )\cf2  \cf15 \{\cf2  \
  
\f4\b \cf16 if
\f3\b0 \cf2  \cf13 (\cf2 x \cf13 >\cf2  y\cf13 )\cf2  \cf15 \{\cf2 \
     
\f4\b \cf16 return
\f3\b0 \cf2  x\cf15 ;\cf2 \
  \cf15 \}\cf2 \
  
\f4\b \cf16 else
\f3\b0 \cf2  \cf15 \{\cf2 \
     
\f4\b \cf16 return
\f3\b0 \cf2  y\cf15 ;\cf2 \
  \cf15 \}\cf2 \
\cf15 \}\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Max:\
   lw $t0, 8($sp)         # Load x from stack\
   lw $t1, 4($sp)         # Load y from stack\
   slt $t3, $t0, $t1  \
   bne $t3, $zero, MaxIsY \
   sw $t0, 0($sp)         # Store return value to stack  \
   j MaxEnd\
   MaxIsY: sw $t1, 0($sp) # Store return value to stack\
   MaxEnd: jr $ra\cf0 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs26 \cf6 Feedback?\
\pard\pardeftab720\partightenfactor0

\b0\fs40 \cf5 Table 5.21.1: Example stack addresses for various functions.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clcbpat10 \clwWidth4928\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clcbpat10 \clwWidth3062\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 Function\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 Stack frame\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth4808\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth2942\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b\fs24 \cf16 void
\f3\b0 \cf2  OutLen\cf13 (
\f4\b \cf16 int
\f3\b0 \cf2  feet\cf13 ,\cf2 \
            
\f4\b \cf16 int
\f3\b0 \cf2  inches\cf13 )\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 0($sp)
\f0 : inches\

\f3 4($sp)
\f0 : feet\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth4808\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth2942\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b\fs24 \cf16 int
\f3\b0 \cf2  CompAvg\cf13 (
\f4\b \cf16 int
\f3\b0 \cf2  a\cf13 ,\cf2  
\f4\b \cf16 int
\f3\b0 \cf2  b\cf13 ,\cf2  
\f4\b \cf16 int
\f3\b0 \cf2  c\cf13 )\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 0($sp)
\f0 : return value\

\f3 4($sp)
\f0 : c\

\f3 8($sp)
\f0 : b\

\f3 12($sp)
\f0 : a\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth4808\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth2942\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b\fs24 \cf16 int
\f3\b0 \cf2  CalcSum\cf13 (
\f4\b \cf16 int
\f3\b0 \cf2  w\cf13 ,\cf2  
\f4\b \cf16 int
\f3\b0 \cf2  x\cf13 ,\cf2  \
            
\f4\b \cf16 int
\f3\b0 \cf2  y\cf13 ,\cf2  
\f4\b \cf16 int
\f3\b0 \cf2  z\cf13 )\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs32 \cf2 0($sp)
\f0 : return value\

\f3 4($sp)
\f0 : z\

\f3 8($sp)
\f0 : y\

\f3 12($sp)
\f0 : x\

\f3 16($sp)
\f0 : w\cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.10.53 PM.png \width19440 \height14340
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
A function call using the program stack is converted to instructions that push each argument to the stack, reserving a stack location for the return value, jumping to the subroutine, and popping the return value and arguments afterwards.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf5 Figure 5.21.2: Function call in assembly using program stack.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 Assume w is held in $t0 and 20 is held in $t1.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat9 \trbrdrt\brdrs\brdrw40\brdrcf3 \trbrdrl\brdrs\brdrw40\brdrcf3 \trbrdrb\brdrs\brdrw40\brdrcf3 \trbrdrr\brdrs\brdrw40\brdrcf3 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7545\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt160 \clpadl160 \clpadb160 \clpadr160 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3\fs24 \cf2 z \cf13 =\cf2  Max\cf13 (\cf2 w\cf13 ,\cf2  \cf14 20\cf13 )\cf15 ;\cf2 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 addi $sp, $sp, -4     \
sw $t0, 0($sp)        # Push w to stack\
addi $sp, $sp, -4   \
sw $t1, 0($sp)        # Push 20 to stack\
addi $sp, $sp, -4     # Make space for return value\
jal Max               # Jump to Max subroutine\
lw $t2, 0($sp)        # Pop return value to $t2\
addi $sp, $sp, 4      \
addi $sp, $sp, 4      # Pop argument from stack\
addi $sp, $sp, 4      # Pop argument from stack\cf0 \cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb4 \expnd0\expndtw0\kerning0
5.21.4: Function call using the program stack.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.11.52 PM.png \width19580 \height18340
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs37\fsmilli18720 \cf2 \expnd0\expndtw0\kerning0
Functions with local variables\
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 In C, A 
\i\b local variable
\i0\b0  declared in a function has a scope limited to the function, meaning the variable only exists when the function executes. A local variable can be stored in the program stack. In assembly, each variable declaration is implemented by pushing a new value to the stack. Before the function returns, the variable is popped from the stack.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.12.56 PM.png \width19660 \height10200
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.14.03 PM.png \width19440 \height23780
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.16.17 PM.png \width19440 \height22180
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.25.00 PM.png \width19760 \height17760
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.26.54 PM.png \width17300 \height24900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic 1__#$!@%!#__Screen Shot 2019-05-29 at 9.26.54 PM.png \width17300 \height24900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.34.58 PM.png \width17320 \height25040
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2019-05-29 at 9.44.14 PM.png \width19540 \height21420
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
}